#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 156
#define YY_END_OF_BUFFER 157
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1080] =
    {   0,
        0,    0,  153,  153,    2,    2,  157,  155,    4,    4,
      155,  155,  145,  151,  145,  145,  148,  145,  145,  145,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  145,  153,  154,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  140,    0,    1,  148,
      147,  146,  142,  141,  139,  143,  150,  150,  150,  150,

      150,  150,  150,  130,  150,  131,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  132,  150,  150,  133,  134,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  135,  136,
      137,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  138,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  144,  153,  152,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  149,  146,  115,  150,  150,  116,
      150,  150,  117,  150,  118,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  119,  150,  120,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  121,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  122,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  123,  150,  150,  124,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  125,  150,
      150,  126,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  127,  150,  150,  150,  150,  128,
      150,  150,  150,  150,  129,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

      150,  150,  150,  150,  150,  150,  150,   84,  150,  150,
       85,   86,  150,  150,  150,  150,   87,  150,  150,  150,
      150,   88,   89,  150,  150,  150,   90,   91,  150,  150,
      150,  150,  150,  150,  150,  150,   92,  150,   93,   94,
      150,  150,   95,  150,   96,  150,   97,  150,  150,  150,
      150,  150,  150,   98,  150,   99,  100,  101,  150,  102,
      150,  103,  150,  150,  150,  150,  104,  150,  150,  150,
      150,  150,  105,  150,  150,  150,  150,  150,  150,  150,
      150,  106,  150,  150,  150,  150,  107,  108,  109,  110,
      150,  150,  150,  150,  150,  150,  150,  150,  111,  150,

      112,  150,  113,  114,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,   61,  150,
       62,  150,   63,  150,  150,  150,  150,  150,  150,  150,
       64,  150,  150,  150,   65,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,   66,   67,  150,   68,  150,
      150,   69,  150,   70,   71,  150,  150,  150,  150,   72,
       73,   74,   75,  150,   76,  150,  150,  150,   77,   78,
      150,  150,  150,  150,  150,   79,  150,  150,  150,  150,
      150,   80,  150,  150,  150,   81,  150,  150,  150,   82,
      150,  150,  150,   83,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      150,  150,   35,  150,  150,  150,   36,  150,   37,  150,
      150,   38,   39,  150,   40,  150,   41,   42,  150,   43,
      150,  150,   44,   45,  150,   46,   47,  150,  150,   48,
       49,  150,  150,   50,  150,  150,  150,   51,  150,   52,

       53,   54,   55,  150,   56,  150,  150,  150,   57,   58,
       59,   60,  150,  150,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  150,   17,
       18,  150,   19,   20,   21,  150,   22,  150,  150,   23,
       24,   25,   26,   27,  150,   28,  150,  150,   29,   30,
      150,   31,   32,  150,  150,  150,   33,   34,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  150,  150,
      150,   12,   13,  150,   14,  150,   15,  150,  150,   16,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  150,  150,  150,    9,  150,   10,   11,    2,
        2,    2,    2,    2,    2,    2,  150,  150,    7,    8,
        2,    2,    2,    2,    5,    6,    2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1087] =
    {   0,
        0,    0,  420,  383,   67,    0,  386, 4334,  133,  135,
      368,    0, 4334, 4334,  131,  359,  133,  132,  356,  349,
      129,  129,  137,  175,  173,  224,  128,  185,  216,  122,
      134,  229,  232,  258,  264,  187,    0,  245,  286,  329,
      274,  141,  275,  139,  282,    0,  314,    0,  168,  206,
      293,  266,    0,    0,  154,  256,  205,  209,  252,  249,
      387,  454,  508,  560,  608,  660,  314,  383,  708,  308,
      317,  446,  451,  760,  808,  472,  320,  460,  858,  910,
      516,  562,  520,  338,  192,  286, 4334,  251, 4334,  299,
      226,  213, 4334, 4334, 4334, 4334,    0,  185,  171,  197,

      315,  396,  222,  284,  383,    0,  456,  323,  390,  402,
      319,  442,  598,  528,  374,  381,  390,  409,  407,  647,
      452,  460,  465,  492,  500,  510,  524,  549,  557,  570,
      549,    0,  571,  565,  697,  568,  592,  590,  612,  608,
      652,  606,  616,  621,  621,  623,  652,  670,  667,    0,
      672,  677,  686,  706,  710,  704,  702,  702,  750,  710,
      711,  729,  730,  727,  750,  746,  751,  751,  747,  760,
      767,  764,  765,  798,  774,  764,  792, 4334,    0, 4334,
        0,  309,    0,  214,    0,  307,  201,  181,    0,    0,
        0,    0,  800,  813,  830,  862,  897,  853,  854,  918,

      948,  843,  946,  958,  962,  964,  908,  977, 1029, 1014,
     1015, 1013, 1018, 1048, 1066, 1116, 1072, 1077, 1078, 1081,
     1102, 1083, 1132, 1135, 1150, 1151, 1168,  979, 1176, 1189,
     1238, 1166, 1181, 1126, 1204, 1234, 1221, 1243, 1262, 1266,
     1272, 1276, 1277, 1305, 1306, 1288, 1317, 1321, 1327, 1342,
     1346, 1361, 1329, 1379, 1380, 1384, 1383, 1416, 1418, 1413,
     1429, 1424, 1446, 1441, 1458, 1480, 1470, 1482, 1499, 1495,
     1483, 1516, 1498,    0, 4334,  162,    0,  802,  797,    0,
      814,  812,    0,  836,    0,  855,  848,  864,  876, 1082,
      871,  883,  900,  933,  947,    0,  967,    0,  976, 1021,

     1218, 1071, 1119, 1156, 1184, 1225, 1262, 1295, 1302,    0,
     1334, 1345, 1361, 1357, 1383, 1379, 1387, 1432, 1439,    0,
     1442, 1513, 1526, 1508, 1525, 1528, 1519, 1522, 1525, 1534,
     1531, 1544, 1548, 1549, 1552, 1537, 1545,    0, 1541, 1557,
     1556, 1567, 1573, 1568, 1570, 1557, 1559, 1561,    0, 1571,
     1569, 1571, 1586, 1588, 1594, 1582, 1581, 1586, 1599, 1583,
     1599, 1603, 1596, 1607,    0, 1590, 1595, 1596, 1607,    0,
     1605, 1605, 1614, 1624,    0, 1627, 1616, 1621, 1636, 1630,
     1624, 1644, 1626, 1630, 1639, 1643, 1636,    0,  156, 1657,
     1660, 1661, 1662, 1665, 1683, 1678, 1695, 1686, 1711, 1696,

     1719, 1729, 1734, 1724, 1720, 1745, 1773, 1768, 1750, 1774,
     1778, 1779, 1784, 1802, 1810, 1812, 1814, 1818, 1843, 1842,
     1828, 1846, 1851, 1868, 1852, 1876, 1886, 1877, 1892, 1894,
     1882, 1920, 1910, 1918, 1942, 1928, 1934, 1960, 1964, 1931,
     1959, 1972, 1982, 1983, 1994, 1996, 1997, 1998, 2022, 2027,
     2013, 2031, 2028, 2052, 2062, 2057, 2066, 2085, 2076, 2091,
     2081, 2090, 2100, 2102, 2116, 2121, 2125, 2135, 2144, 2139,
     2161, 2174, 2175, 2173, 2140, 2179, 2165, 2178, 2209, 2204,
     2213, 2223, 2214, 2238, 2232, 2244, 2215, 2248, 2263, 2277,
     2278, 2273, 2292, 2286, 2311, 2303, 2307, 2332, 2337, 2342,

     1657, 1700, 1722, 1769, 1803, 1845, 1917,    0, 2001, 2041,
        0,    0, 2059, 2058, 2141, 2170,    0, 2203, 2202, 2224,
     2271,    0,    0, 2283, 2313, 2319,    0,    0, 2344, 2335,
     2336, 2335, 2341, 2364, 2365, 2363,    0, 2350,    0,    0,
     2370, 2360,    0, 2366,    0, 2366,    0, 2377, 2367, 2362,
     2372, 2373, 2392,    0, 2384,    0,    0,    0, 2380,    0,
     2389,    0, 2397, 2385, 2398, 2393,    0, 2411, 2410, 2398,
     2401, 2407,    0, 2420, 2421, 2411, 2407, 2410, 2421, 2421,
     2433,    0, 2434, 2431, 2439, 2430,    0,    0, 2431,    0,
     2450, 2440, 2434, 2455, 2438, 2452, 2455, 2456,    0, 2444,

        0, 2463,    0,    0, 2471, 2465, 2483, 2468, 2473, 2489,
     2474, 2479, 2504, 2517, 2505, 2507, 2533, 2542, 2543, 2545,
     2519, 2567, 2557, 2556, 2579, 2561, 2591, 2595, 2605, 2610,
     2596, 2607, 2613, 2635, 2645, 2631, 2648, 2671, 2680, 2650,
     2659, 2669, 2661, 2685, 2713, 2699, 2701, 2714, 2702, 2715,
     2704, 2738, 2743, 2747, 2744, 2755, 2776, 2753, 2772, 2777,
     2781, 2787, 2798, 2809, 2810, 2811, 2812, 2827, 2843, 2835,
     2833, 2851, 2852, 2864, 2881, 2885, 2883, 2896, 2906, 2887,
     2918, 2924, 2927, 2937, 2950, 2936, 2940, 2968, 2949, 2980,
     2959, 2978, 2989, 2981, 2993, 3002, 2994, 3023, 3024, 3032,

     3033, 3042, 3047, 3048, 3056, 3057, 3058, 3073,    0, 2468,
        0, 2501,    0, 2597, 2666, 2750, 2789, 2852, 2876, 2915,
        0, 2915, 2948, 2985,    0, 2989, 3045, 3055, 3059, 3065,
     3071, 3072, 3074, 3092, 3099,    0,    0, 3091,    0, 3097,
     3088,    0, 3087,    0,    0, 3091, 3107, 3094, 3102,    0,
        0,    0,    0, 3110,    0, 3115, 3109, 3101,    0,    0,
     3117, 3105, 3106, 3121, 3118,    0, 3131, 3131, 3116, 3133,
     3144, 3127, 3129, 3132, 3154,    0, 3151, 3153, 3153,    0,
     3141, 3160, 3164,    0, 3161, 3164, 3165, 3175, 3170, 3186,
     3189, 3194, 3199, 3215, 3200, 3218, 3228, 3229, 3243, 3232,

     3234, 3253, 3258, 3244, 3282, 3269, 3272, 3283, 3297, 3308,
     3306, 3307, 3320, 3336, 3321, 3349, 3332, 3337, 3346, 3360,
     3362, 3371, 3365, 3381, 3390, 3394, 3399, 3400, 3403, 3405,
     3411, 3433, 3439, 3434, 3416, 3435, 3444, 3457, 3465, 3448,
     3479, 3467, 3493, 3501, 3488, 3518, 3502, 3519, 3523, 3532,
     3541, 3531, 3542, 3555, 3553, 3556, 3557, 3590, 3591, 3572,
     3208, 3257,    0, 3265, 3292, 3323, 3361, 3370,    0, 3447,
     3492,    0,    0, 3569,    0, 3576,    0,    0, 3593,    0,
     3586, 3581,    0,    0, 3577,    0,    0, 3588, 3605,    0,
        0, 3599, 3611,    0, 3593, 3609, 3595,    0, 3618, 3607,

        0,    0,    0, 3618,    0, 3630, 3631, 3614,    0,    0,
        0,    0, 3617, 3624, 3644, 3639, 3641, 3660, 3650, 3645,
     3662, 3674, 3663, 3695, 3684, 3678, 3712, 3716, 3713, 3718,
     3717, 3728, 3729, 3730, 3752, 3747, 3746, 3751, 3770, 3780,
     3781, 3782, 3783, 3784, 3785, 3806, 3796, 3814, 3824, 3815,
     3818, 3836, 3848, 3850, 3847, 3849, 3852, 3878, 3860, 3886,
     3888, 3901, 3890, 3900, 3902, 3903, 3918, 3919, 3660,    0,
        0, 3672,    0,    0,    0, 3858,    0, 3899, 3922,    0,
        0,    0,    0,    0, 3934,    0, 3921, 3936,    0,    0,
     3925,    0,    0, 3929, 3936, 3952,    0,    0, 3955, 3954,

     3956, 3957, 3960, 3968, 3972, 3989, 3973, 3990, 3994, 3986,
     3998, 4008, 4011, 4022, 4026, 4027, 4030, 4039, 4040, 4044,
     4048, 4052, 4056, 4065, 4080, 4062, 4081, 4084, 4030, 4089,
     4079,    0,    0, 4081,    0, 4084,    0, 4078, 4091,    0,
     4106, 4114, 4132, 4116, 4119, 4135, 4122, 4138, 4140, 4144,
     4170, 4148, 4120, 4141, 4172,    0, 4159,    0,    0, 4176,
     4189, 4192, 4194, 4206, 4198, 4202, 4171, 4164,    0,    0,
     4215, 4210, 4228, 4232,    0,    0, 4234, 4238, 4334, 4303,
     4308,  135, 4313, 4318, 4323, 4328
    } ;

static const flex_int16_t yy_def[1087] =
    {   0,
     1079,    1, 1080, 1080, 1079,    5, 1079, 1079, 1079, 1079,
     1079, 1081, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1079, 1083, 1079, 1084, 1084, 1079,
     1084, 1085, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1086, 1086,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1084, 1079, 1079, 1081, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1082, 1082, 1082, 1082,

     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1079, 1083, 1079,
     1084, 1084, 1084, 1085, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62, 1084, 1079, 1079, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,

     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1084, 1084,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,

     1082, 1082, 1082, 1082,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,

     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1082, 1082, 1082, 1082, 1082, 1082, 1082,   62,
       62,   62,   62,   62,   62,   62, 1082, 1082, 1082, 1082,
       62,   62,   62,   62, 1082, 1082,   62,   62,    0, 1079,
     1079, 1079, 1079, 1079, 1079, 1079
    } ;

static const flex_int16_t yy_nxt[4402] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  105,   99,  100,  137,
      107,  138,  127,  101,  173,  102,  177,  108,  128,  103,
      104,  185,  174,  186,  109,  389,  106,  110,  111,  182,
       86,  276,   98,  105,   99,  100,  137,  107,  138,  127,
      101,  173,  102,  177,  108,  128,  103,  104,  112,  174,
      389,  109,  113,  106,  110,  111,  114,  117,  129,  118,

      153,  277,  115,  278,  119,  116,  130,   86,   86,  120,
      187,  154,  131,  188,  186,  112,  279,  155,  388,  113,
      189,  190,  276,  114,  117,  129,  118,  153,  277,  115,
      278,  119,  116,  130,  132,   91,  120,  121,  154,  131,
      133,  134,  135,  279,  155,  122,  139,  136,  123,  142,
      140,  124,  284,  143,  125,  275,  141,  126,  274,  144,
      192,  132,  156,  191,  121,  187,  157,  133,  134,  135,
      181,  145,  122,  139,  136,  123,  142,  140,  124,  284,
      143,  125,  149,  141,  126,  146,  144,   86,   86,  156,
      150,  147,  148,  157,  151,  175,  176,  152,  145,  285,

      170,  158,  171,  159,  183,  172,  160,   92,   90,  149,
      182,   86,  146,  161,  162,  188,  186,  150,  147,  148,
      180,  151,  175,  176,  152,  193,  285,  170,  158,  171,
      159,  193,  172,  160,  234,  233,  291,  193,  223,  280,
      161,  162,  163,  164,  224,  193,  165,  281,  178,  166,
      167,  193,  193,  296,  193,  273,  168,  193,  193,  169,
       96,  234,  233,  291,  193,  223,  280,   95,   91,  163,
      164,  224,  193,  165,  281,  193,  166,  167,  193,   87,
      296,  193,  273,  168,  193, 1079,  169,  181,  181,   47,
      181,  181,  181,  181,  181,  181,  225,  181,  181,  181,

      193,  286,  193,  194,  226,  195,  196,  306,  307,  282,
      227,  197,  283,  198,  292,  287,  293,  199,  200,  294,
      193,  308,  311,  225,  309,  310,   47,  193,  286,  295,
      194,  226,  195,  196,  306,  307,  282,  227,  197,  283,
      198,  292,  287,  293,  199,  200,  294,  193,  308,  311,
     1079,  309,  310,  181,  181,  181,  295,  181,  181,  181,
      181,  181,  181,  235,  181,  181,  181,  236,  238, 1079,
     1079,  201,  239,  237,  297, 1079,  317,  252,  240,  298,
      288,  253, 1079,  193,  318,  249,  289,  290,  193,  193,
      235,  202,  319, 1079,  236,  238,  250,  193,  201,  239,

      237,  297,  251,  317,  252,  240,  298,  288,  253,  193,
      193,  318,  249,  289,  290,  193,  193, 1079,  202,  319,
      181,  203,  320,  250,  193,  193, 1079,  321,  204,  251,
     1079, 1079, 1079,  193,  322,  205,  193,  193,  206,  207,
      271,  272,  266,  303,  267,  193, 1079,  268,  203,  320,
     1079,  323,  193,  193,  321,  204, 1079,  193,  304,  305,
      193,  322,  205, 1079,  193,  206,  207,  271,  272,  266,
      303,  267,  193,  208,  268,  269,  324,  209,  323,  193,
      193,  210,  329,  270,  193,  304,  305,  211,  325, 1079,
      212,  326,  330,  331,  336, 1079,  327,  193, 1079,  193,

      208,  328,  269,  324,  209, 1079,  193, 1079,  210,  329,
      270,  299, 1079,  337,  211,  325,  300,  212,  326,  330,
      331,  336,  301,  327,  193,  193,  193,  338,  328,  302,
      339,  340,  213,  341,  214, 1079,  345, 1079,  299,  215,
      337, 1079,  346,  300,  216,  193, 1079,  347, 1079,  301,
     1079, 1079,  193,  348,  338,  349,  302,  339,  340,  213,
      341,  214,  312,  345,  313,  342,  215,  343,  314,  346,
     1079,  216,  193,  217,  347,  315,  350,  193,  344,  316,
      348,  218,  349,  351,  219,  352, 1079,  220,  353,  312,
      221,  313,  342,  222,  343,  314, 1079,  193, 1079, 1079,

      217, 1079,  315,  350,  193,  344,  316, 1079,  218,  354,
      351,  219,  352,  332,  220,  353,  355,  221, 1079,  356,
      222,  361,  362,  333,  193,  193,  228,  357,  334,  335,
      359,  358,  229,  230,  231,  360,  354,  366, 1079,  232,
      332,  367,  368,  355,  369,  193,  356, 1079,  361,  362,
      333,  370,  193,  228,  357,  334,  335,  359,  358,  229,
      230,  231,  360,  373,  366,  363,  232, 1079,  367,  368,
     1079,  369,  193,  241,  364,  371,  374,  193,  370,  375,
      376,  377,  365,  379,  378,  380,  372,  242, 1079,  381,
      373,  385,  363,  243,  244,  382,  386,  193, 1079, 1079,

      241,  364,  371,  374,  193,  387,  375,  376,  377,  365,
      379,  378,  380,  372,  242,  383,  381,  193,  385,  501,
      243,  244,  382,  386,  193,  193,  245,  502,  384,  390,
      193,  503,  387, 1079,  246, 1079,  504,  193,  247, 1079,
     1079,  248,  383, 1079,  193,  193,  501,  193, 1079,  505,
      193, 1079,  193,  245,  502,  384,  390,  193,  503, 1079,
      193,  246,  391,  504,  193,  247,  395,  193,  248,  396,
      193,  193,  193,  254,  193,  255,  505,  193,  256,  193,
      193,  392,  506,  507,  397,  257,  258,  193,  508,  391,
      193,  193,  509,  395,  193,  193,  396,  193,  193,  193,

      254,  512,  255, 1079, 1079,  256,  193,  193,  392,  506,
      507,  397,  257,  258,  193,  508,  513,  193,  193,  509,
     1079,  393,  193,  259,  260,  193,  193,  261,  512,  394,
      262,  263,  514,  398,  193,  193, 1079,  264, 1079, 1079,
      265,  193,  409,  513, 1079,  193,  515,  193,  393, 1079,
      259,  260,  193, 1079,  261,  193,  394,  262,  263,  514,
      398,  193,  193,  193,  264,  193,  399,  265, 1079,  409,
      401,  404,  193,  515,  193,  193,  402,  403,  516,  193,
      400,  407,  193,  193,  517,  193,  405, 1079,  406, 1079,
      193,  408,  193,  399,  193,  193,  193,  401,  404,  193,

      518,  193,  193,  402,  403,  516,  193,  400,  407,  410,
      193,  517,  193,  405,  411,  406,  193, 1079,  408, 1079,
     1079,  193,  193,  193, 1079, 1079,  193,  518,  193,  416,
      193,  193,  193, 1079,  519,  193,  410, 1079, 1079, 1079,
      420,  411,  412,  193,  417,  418,  193,  413,  419,  421,
      193,  193,  193,  414, 1079,  193,  416,  193,  193,  193,
      415,  519,  193,  422,  423,  193,  193,  420, 1079,  412,
     1079,  417,  418,  193,  413,  419,  421,  193,  193,  193,
      414,  424,  193,  193, 1079,  193,  522,  415, 1079,  193,
      422,  423,  193,  193,  193,  193,  430,  510,  193,  511,

      193,  431, 1079,  193, 1079,  432, 1079,  435,  424,  193,
      193,  433,  193,  522,  193,  193,  193, 1079,  193,  193,
      193,  193,  193,  430,  510,  193,  511,  193,  431,  434,
      193,  425,  432,  426,  435, 1079,  193,  427,  433,  193,
     1079,  193,  193,  193,  428,  193,  193,  193,  429,  193,
     1079,  523,  193,  193, 1079, 1079,  434, 1079,  425,  436,
      426, 1079,  437,  451,  427, 1079,  193,  193,  193,  193,
      193,  428,  193,  524, 1079,  429,  193,  440,  523,  193,
      193,  438,  441,  193,  439,  193,  436,  193,  193,  437,
      451, 1079,  449,  193,  193,  193,  193,  443,  193,  193,

      524,  442,  450,  193,  440,  193,  193, 1079,  438,  441,
      193,  439,  193,  193,  193,  193,  525,  444,  193,  449,
      193,  193,  452, 1079,  443,  193,  193, 1079,  442,  450,
      193, 1079,  193,  193,  455,  520,  456, 1079,  193,  526,
      193,  193, 1079,  525,  444,  193, 1079,  457,  193,  452,
      521,  193, 1079,  193,  445,  193, 1079,  453,  193,  454,
      193,  455,  520,  456,  446,  193,  526, 1079,  193,  447,
      448,  193, 1079,  458,  457,  193, 1079,  521,  193,  193,
      193,  445,  193,  193,  453,  193,  454,  193,  459,  193,
      527,  446,  460,  193,  193, 1079,  447,  448,  193,  193,

      458,  463,  193,  193,  461,  193,  193,  193,  462,  193,
      193, 1079,  528,  193,  193,  459,  193,  527,  464,  460,
      193,  193,  193,  193,  465,  193,  193, 1079,  463,  529,
      193,  461,  193,  466,  193,  462,  193, 1079,  193,  528,
      193,  193,  193,  193,  193,  464,  193,  530,  474,  193,
      193,  465,  193,  467,  193,  469,  529,  468,  193,  193,
      466,  193,  531,  470,  193,  193,  193,  471, 1079,  193,
      193,  193, 1079,  193,  530,  474,  532, 1079,  193,  193,
      467,  193,  469,  193,  468,  193,  193,  472,  533,  531,
      470,  193,  473,  193,  471,  476,  193,  193,  193,  475,

      193,  193, 1079,  532,  477,  193,  193,  534, 1079,  535,
      193,  479,  478,  480,  472,  533,  193,  193,  536,  473,
      193,  193,  476,  193,  193,  193,  475,  193,  193,  481,
      193,  477,  482,  193,  534,  193,  535,  483,  479,  478,
      480,  486, 1079,  193,  193,  536,  193,  193,  193,  537,
      193, 1079,  538,  193,  484,  193,  481,  193,  193,  482,
      193,  193,  193,  193,  483,  485,  193,  539,  486,  488,
     1079,  487, 1079,  193, 1079,  193,  537,  193,  193,  538,
      193,  484,  193,  193, 1079,  193,  492,  193,  193, 1079,
      193,  489,  485,  193,  539,  193,  488,  193,  487,  193,

      498,  490,  193,  493,  491,  193, 1079,  193, 1079, 1079,
      193,  500,  496,  492,  193,  193,  193,  193,  489,  193,
      193, 1079,  193,  494,  193,  497,  193,  498,  490,  495,
      493,  491,  193,  193,  193,  193,  193,  540,  500,  496,
      541,  542,  193,  193,  193,  543,  193,  193,  499,  544,
      494,  545,  497,  193,  546,  547,  495,  548,  549,  193,
      193,  550,  193,  193,  540,  551,  552,  541,  542,  553,
      555,  556,  543,  557,  558,  499,  544,  559,  545,  554,
      193,  546,  547,  560,  548,  549,  561,  562,  550,  563,
      564,  565,  551,  552,  566,  567,  553,  555,  556,  568,

      557,  558,  569,  570,  559,  571,  554,  572,  573,  574,
      560,  575,  576,  561,  562,  577,  563,  564,  565,  578,
      579,  566,  567,  580,  581,  582,  568,  583,  584,  569,
      570,  585,  571,  586,  572,  573,  574,  587,  575,  576,
      588,  589,  577,  592,  590,  593,  578,  579,  594,  595,
      580,  581,  582,  591,  583,  584,  596,  597,  585,  598,
      586,  599,  600,  603,  587,  601,  604,  588,  589,  602,
      592,  590,  593, 1079,  193,  594,  595,  605,  193,  193,
      591, 1079,  607,  596,  597, 1079,  598,  709,  599,  600,
      603,  606,  601,  604,  193,  193,  602,  193,  193,  193,

      193,  193,  193,  193,  605,  193,  193,  608,  609,  607,
     1079, 1079,  193,  193,  709,  193, 1079,  710,  606, 1079,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  611,  193,  193,  608,  609,  193,  193,  610,  193,
      193,  193,  193,  612,  710,  613,  193,  193,  193,  614,
      193,  615,  711,  617,  616,  193,  193,  193,  611,  193,
      193,  193,  193,  193,  193,  610,  193,  193,  193, 1079,
      612,  193,  613,  193, 1079,  193,  614,  618,  615,  711,
      617,  616,  193,  193,  193,  193,  619,  193,  193,  193,
      193,  621, 1079,  193,  193,  193,  193,  623,  193,  620,

     1079,  193, 1079,  622,  618,  193,  712, 1079, 1079,  193,
      193,  193,  193,  619,  193,  193,  193,  193,  621,  624,
     1079,  193,  193,  193,  623,  626,  620,  193,  193,  193,
      622,  628,  193,  712,  625,  193, 1079,  193,  193,  193,
      713, 1079,  193,  193,  627,  632,  624,  193,  193,  193,
      629,  193,  626, 1079,  193,  193,  193,  630,  628,  193,
      193,  625,  193,  193, 1079,  193,  193,  713,  193,  635,
      631,  627,  632,  633,  193,  714,  193,  629,  193,  193,
      193,  634,  193,  193,  630,  193,  193,  193,  193,  193,
      193,  636,  193,  193,  193,  193,  635,  631, 1079,  641,

      633,  638,  714,  193, 1079,  193,  193,  193,  634,  193,
      193,  193,  193,  193,  193,  193,  193,  637,  636,  193,
      193,  193,  639,  193, 1079,  640,  641,  193,  638,  193,
      193,  193,  193,  642,  715,  193,  193,  193,  193, 1079,
      193,  193,  645,  643,  637,  193,  193,  193,  193,  639,
      193,  193,  640, 1079,  193,  193,  193,  193,  193,  193,
      642,  715,  193,  649,  193,  193,  644,  646,  193,  645,
      643,  193,  193, 1079,  193,  193,  193,  193,  193,  193,
      647,  193,  193, 1079,  193,  648,  193, 1079, 1079,  193,
      649,  650,  193,  644,  646,  193,  193,  193,  193,  193,

      193,  193,  651,  193,  193,  652,  193,  647,  193,  193,
      653,  654,  648,  655,  656,  657,  193, 1079,  650,  193,
      193, 1079,  716,  193,  193,  658,  193,  193,  193,  651,
      193,  193,  652,  193,  193,  193,  193,  653,  654,  193,
      655,  656,  657, 1079,  193,  662,  193,  193,  193,  716,
      193, 1079,  658,  660,  717,  659, 1079,  193,  193,  193,
      193,  193,  193,  661,  193,  193,  193, 1079,  193,  193,
      665,  193,  662,  663,  193,  193, 1079,  193,  664,  193,
      660,  717,  659,  193,  718,  666,  193, 1079,  719,  193,
      661,  193,  193,  193,  193,  193,  193,  665,  193,  193,

      663,  193,  193,  193,  667,  664,  193,  193,  193,  668,
      193,  718,  666,  193,  670,  719,  193,  193,  193,  193,
      193,  193,  193,  669,  671,  193,  193,  193,  193,  193,
      193,  667,  672,  193,  193,  193,  668,  193,  674,  193,
      193,  670,  675, 1079,  193,  193,  193,  673,  676,  193,
      669,  671,  193,  193,  193,  193,  193,  683,  193,  672,
      193,  193,  193, 1079,  193,  674,  193,  678, 1079,  675,
      677, 1079,  193,  720,  673,  676,  193,  193,  193,  193,
      193,  193,  685,  193,  683,  193,  679,  680,  193,  193,
      193,  193,  193,  682,  678,  193,  193,  677,  193,  193,

      720,  721,  193,  193,  193,  193,  684,  681,  193,  685,
      193,  193,  193,  679,  680,  193,  193,  193,  193,  193,
      682,  193,  193,  193, 1079,  193,  193,  722,  721,  193,
      193,  193,  693,  684,  681,  723,  687,  193,  193,  193,
      193,  193,  193,  193,  686,  688,  193,  689,  193,  193,
      193,  193,  193,  193,  722,  193,  724,  193,  193,  693,
      193,  193,  723,  687,  691,  193,  690,  193,  193,  193,
      692,  686,  688,  193,  689,  193,  193,  193,  193,  193,
      694,  193,  193,  724,  725,  193,  699,  193,  193,  695,
      193,  691,  193,  690,  193,  193,  193,  692,  726, 1079,

      193, 1079,  193,  193,  696,  698,  697,  694,  193,  193,
      193,  725,  193,  699,  193,  193,  695,  193,  700,  701,
      193,  193,  193,  193,  193,  726,  702,  193,  193,  193,
      193,  696,  698,  697,  727, 1079,  193,  193,  703,  704,
      193,  193,  193,  728,  193,  700,  701,  193,  193,  193,
      193,  193, 1079,  702,  193,  193,  193,  707,  705,  193,
      729,  727,  706,  730,  731,  703,  704,  193,  732,  193,
      728,  193,  708,  733,  193,  193,  193,  734,  735,  193,
      736,  193,  737,  738,  707,  705,  193,  729,  739,  706,
      730,  731,  740,  741,  742,  732,  193,  743,  744,  708,

      733,  193,  745,  746,  734,  735,  193,  736,  749,  737,
      738,  747,  750,  751,  752,  739,  753,  754,  755,  740,
      741,  742,  748,  756,  743,  744,  757,  758,  759,  745,
      746,  760,  761,  762,  763,  749,  764,  765,  747,  750,
      751,  752,  766,  753,  754,  755,  767,  768,  769,  748,
      756,  770,  771,  757,  758,  759,  772,  773,  760,  761,
      762,  763,  774,  764,  765,  775,  776,  777,  778,  766,
      779,  780,  781,  767,  768,  769,  782,  783,  770,  771,
      784, 1079,  786,  772,  773,  193, 1079,  861,  193,  774,
      193,  791,  775,  776,  777,  778,  193,  779,  780,  781,

      193,  785,  193,  782,  783,  788,  193,  784,  193,  786,
      789,  193,  193,  787,  861,  193,  193,  193,  791,  790,
      193,  193,  193,  193,  193,  792,  193,  193,  785,  193,
      793, 1079,  788,  193,  193,  193,  193,  789,  193,  862,
      787,  193,  193,  193,  193, 1079,  790,  193,  193,  193,
      193,  193,  792,  193,  193, 1079,  193,  793,  794,  193,
      193,  193,  193,  193, 1079, 1079,  862, 1079,  193,  193,
      193,  193,  795,  193,  193,  796,  797,  193,  193,  193,
      193,  193,  193,  193,  193,  794,  193,  193,  800,  193,
      799,  798,  801,  193,  193, 1079,  193,  193,  193,  795,

      193,  193,  796,  797,  193,  193,  193,  193,  193,  193,
      802,  193,  193,  193,  863,  800,  193,  799,  798,  801,
      193,  193,  193,  193,  193,  193,  803,  193,  193,  805,
      193,  193,  193,  193,  804,  193, 1079,  802, 1079,  193,
      193,  863,  193,  193,  193, 1079, 1079,  193,  193,  193,
      193,  193,  193,  803,  193,  193,  805,  193, 1079,  193,
      193,  804,  193,  806,  808,  193, 1079,  812,  193,  193,
     1079,  193,  193,  807,  193,  193,  193,  193,  193,  193,
      809, 1079,  193,  864,  810,  193,  193,  193,  193,  193,
      806,  808,  193,  811,  812,  193,  193,  193,  193,  193,

      807,  813,  193,  193, 1079,  193,  193,  809,  193,  193,
      864,  810,  193,  193,  193,  193,  193,  193,  193,  193,
      811,  193,  193,  193,  193,  193,  814,  815,  813,  193,
      193,  193,  193,  193, 1079,  193,  193, 1079,  193,  193,
      816,  193,  817,  193,  193,  193,  193, 1079,  193,  193,
      193,  193,  193,  814,  815,  818, 1079,  193,  193,  193,
      193,  193, 1079,  193,  193,  193,  193,  816,  193,  817,
      193, 1079,  193,  819,  821,  193,  865,  193,  193,  193,
      193,  193,  818,  820,  193,  822, 1079,  193,  193,  193,
      193,  193,  193,  193,  193,  823,  825,  193,  193,  193,

      819,  821,  193,  865,  193,  866,  824,  193,  193,  193,
      820,  193,  822,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  823,  825,  193,  193,  193,  193,  193,  828,
      826,  193,  866,  824,  827,  193,  193, 1079, 1079, 1079,
      193,  193,  193, 1079,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  828,  826,  829,  830,
      193,  827,  193,  831,  193,  832,  833, 1079,  193,  834,
      193,  193,  193,  193,  193,  193,  193,  193,  867,  193,
      193,  193, 1079, 1079, 1079,  829,  830,  193,  193,  193,
      831,  193,  832,  833,  835,  193,  834,  193,  193,  193,

      193,  193,  193,  868,  193,  867, 1079,  193,  193,  838,
      837,  836,  840,  193, 1079,  193,  193, 1079,  193,  839,
      193,  835,  193,  193,  193,  193, 1079,  193,  193,  193,
      868,  193,  869,  193, 1079,  193,  838,  837,  836,  840,
      193,  193,  870,  193,  193,  193,  839,  193,  841,  193,
      193,  193,  843,  193,  193,  193,  842,  846, 1079,  869,
      193,  193,  193,  844,  193,  845,  848,  193,  193,  870,
      193,  193,  871,  193,  193,  841,  193,  193, 1079,  843,
      193,  193,  193,  842,  846,  193,  193,  193,  193,  847,
      844,  193,  845,  848,  193,  193,  193,  193,  193,  871,

      193,  193,  872,  193,  193,  193,  193,  849,  851, 1079,
      193,  193,  193,  193,  193,  193,  847,  193,  193,  193,
      850,  873,  193,  193,  193,  193,  193,  853,  852,  872,
      193,  193,  193,  193,  849,  851,  854,  193,  193,  193,
      193,  193,  193, 1079,  193,  193,  193,  850,  873,  193,
      857,  856, 1079,  193,  853,  852,  855,  193,  193,  193,
      193,  193,  858,  854,  193,  193,  193,  193,  193,  193,
      193,  874,  875,  193,  860,  193,  193,  857,  856,  193,
      876,  859,  877,  855,  193,  193,  193,  193,  193,  858,
      193,  193,  193,  193,  193,  193,  193,  193,  874,  875,

      193,  860,  193,  878,  879,  880,  193,  876,  859,  877,
      193,  193,  193,  881,  882,  883,  884,  193,  885,  886,
      193,  193,  193,  887,  888,  889,  890,  891,  892,  893,
      878,  879,  880,  894,  895,  896,  897,  193,  898,  899,
      881,  882,  883,  884,  900,  885,  886,  901,  902,  903,
      887,  888,  889,  890,  891,  892,  893,  904,  905,  906,
      894,  895,  896,  897,  907,  898,  899,  908,  909,  910,
      911,  900,  912,  913,  901,  902,  903,  914,  193, 1079,
     1079,  193,  193,  915,  904,  905,  906,  193, 1079, 1079,
     1079,  907,  193, 1079,  908,  909,  910,  911,  193,  912,

      913,  193,  193,  917,  914,  193,  918,  193,  193,  193,
      915,  193,  193,  916,  193,  920,  193,  193, 1079,  193,
      919,  969, 1079,  193, 1079,  193,  193,  922,  193,  193,
      917,  193,  193,  918,  193,  923,  193,  193,  193,  193,
      916,  921,  920,  193,  193,  193,  193,  919,  969,  926,
      193,  193,  193,  193,  922,  193,  924, 1079,  193,  193,
      193,  929,  923,  193,  193,  193,  193,  925,  921,  193,
      193,  193,  193,  193,  970,  193,  926, 1079,  193,  193,
      193,  193,  193,  924,  928,  927,  931,  193,  929,  193,
      193,  971,  193,  193,  925,  193,  193,  193,  193,  193,

      193,  970,  193,  930,  932,  972,  193,  193,  193,  193,
     1079,  928,  927,  931,  193,  933,  193,  193,  971,  193,
      193,  936,  193,  193,  193,  193,  193,  193,  934,  935,
      930,  932,  972,  193,  193, 1079,  193,  193,  193, 1079,
      973,  193,  933,  193,  193,  193,  193,  193,  936,  193,
      193,  193,  193,  193,  193,  934,  935,  193,  193, 1079,
      937,  193,  939,  193,  193,  193,  193,  973,  938,  193,
      193,  193,  193,  193,  193, 1079,  193,  193,  940,  193,
      193,  193,  942,  193,  193,  193,  193,  937,  193,  939,
      193, 1079,  974,  193,  975,  938,  193,  193,  193,  193,

      193,  193,  193,  941,  193,  940,  193,  193,  193,  942,
      193,  193,  943,  193,  944,  193,  193,  193,  193,  974,
      193,  975,  945, 1079,  193,  193,  193,  193,  193,  193,
      941,  193, 1079,  193,  193,  193,  193,  193,  193,  943,
      193,  944,  193,  193,  193,  193,  946,  193,  193,  945,
      193,  193,  193,  193,  193,  193,  193, 1079,  193,  947,
      193,  949,  976,  193,  193,  952,  948,  193, 1079,  193,
      193,  193,  193,  946,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  947,  950,  949,  976,
     1079, 1079,  952,  948,  193,  951,  193,  193,  193,  193,

      953,  193,  193,  193,  193,  193,  954, 1079,  193,  193,
      193,  193,  193, 1079,  950,  958,  193,  955,  193,  193,
      956,  193,  951,  193,  977,  193, 1079,  953, 1079,  193,
      193,  193,  193,  954,  957,  193,  193,  193,  193,  193,
      193, 1079,  958,  193,  955,  193,  193,  956,  193,  193,
      959,  977,  193,  960,  962,  193,  193,  193,  193,  963,
      193,  957,  193,  193,  961,  193,  193,  193,  193,  193,
      965,  964,  193,  193,  193,  193,  193,  959,  193,  193,
      960,  962,  193,  193,  978,  193,  963,  193,  966,  193,
      193,  961,  193,  193,  193,  193,  193,  965,  964,  193,

      193,  193,  979,  967,  968,  193,  193,  193,  193,  193,
      980,  978,  981,  982,  983,  966,  193,  193,  984,  193,
      193,  193,  985,  986,  987,  988,  989,  193,  193,  979,
      967,  968,  990,  991,  193,  193,  193,  980,  992,  981,
      982,  983,  993,  994,  995,  984,  996,  997,  998,  985,
      986,  987,  988,  989,  193,  193, 1000,  999,  193,  990,
      991,  193, 1003, 1002, 1079,  992, 1079,  193, 1079,  993,
      994,  995, 1079,  996,  997,  998,  193,  193,  193,  193,
      193,  193,  193, 1000,  999,  193, 1001,  193,  193, 1003,
     1002,  193, 1029, 1004,  193,  193, 1030,  193, 1005,  193,

      193,  193, 1079,  193,  193,  193,  193,  193,  193,  193,
     1006,  193,  193, 1001,  193,  193, 1007, 1079,  193, 1029,
     1004,  193,  193, 1030,  193, 1005,  193,  193,  193,  193,
      193, 1008,  193,  193,  193,  193, 1079, 1006,  193,  193,
     1079, 1079,  193, 1007, 1009,  193, 1010,  193,  193,  193,
      193, 1079, 1079,  193,  193,  193,  193,  193, 1008,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
     1079, 1009,  193, 1010,  193, 1079,  193,  193, 1011, 1012,
      193,  193,  193,  193,  193, 1079, 1079,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

     1015,  193,  193, 1079, 1079, 1011, 1012, 1013, 1079, 1017,
      193,  193, 1014,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193, 1015,  193,  193,
     1016,  193, 1019,  193, 1013,  193, 1017, 1079, 1079, 1014,
      193,  193, 1079,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193, 1079, 1020, 1018, 1016,  193, 1019,
      193,  193,  193, 1021,  193,  193,  193,  193,  193,  193,
      193, 1031, 1079,  193, 1079, 1079, 1079,  193,  193,  193,
      193, 1022, 1020, 1018,  193,  193,  193,  193,  193,  193,
     1021,  193,  193,  193,  193,  193,  193,  193, 1031, 1024,

      193, 1025, 1023,  193,  193,  193, 1079,  193, 1022, 1079,
     1079,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193, 1079,  193,  193,  193,  193, 1024,  193, 1025, 1023,
      193, 1032,  193, 1026,  193,  193,  193,  193,  193,  193,
      193, 1033,  193, 1028,  193,  193,  193,  193, 1027, 1034,
      193, 1035,  193, 1036,  193,  193,  193, 1037, 1032, 1038,
     1026, 1039,  193,  193,  193,  193,  193,  193, 1033, 1040,
     1028,  193,  193,  193,  193, 1027, 1034,  193, 1035, 1079,
     1036, 1042,  193,  193, 1037,  193, 1038, 1041, 1039,  193,
      193,  193,  193,  193,  193, 1079, 1040,  193,  193,  193,

      193,  193, 1043,  193,  193,  193,  193,  193, 1042,  193,
      193,  193,  193, 1045, 1041,  193,  193,  193,  193,  193,
      193,  193, 1044,  193,  193,  193,  193,  193,  193, 1043,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
     1045, 1046,  193,  193,  193,  193, 1079,  193,  193, 1044,
      193, 1053,  193,  193,  193,  193, 1048,  193,  193,  193,
     1047,  193,  193,  193,  193,  193,  193,  193, 1046,  193,
      193,  193,  193,  193,  193,  193,  193,  193, 1053, 1052,
     1049,  193,  193, 1048,  193,  193,  193, 1047,  193,  193,
      193,  193,  193,  193,  193, 1050,  193,  193,  193,  193,

      193,  193,  193,  193,  193, 1051, 1052, 1049,  193,  193,
     1054, 1055,  193, 1056, 1057, 1058,  193,  193,  193, 1059,
      193,  193, 1050,  193,  193,  193,  193, 1060,  193,  193,
     1079,  193, 1051,  193, 1079, 1061,  193, 1054, 1055,  193,
     1056, 1057, 1058,  193,  193,  193, 1059, 1067,  193,  193,
      193,  193,  193,  193, 1060,  193,  193,  193,  193,  193,
      193,  193, 1061,  193, 1062,  193,  193, 1063, 1064,  193,
      193, 1079,  193, 1068, 1067,  193,  193,  193,  193,  193,
      193, 1065,  193,  193,  193,  193,  193,  193,  193, 1069,
     1070, 1062,  193,  193, 1063, 1064,  193, 1075, 1066,  193,

     1068, 1076,  193, 1071,  193, 1079,  193,  193, 1065, 1073,
     1079,  193,  193,  193,  193,  193, 1069, 1070, 1079,  193,
      193, 1072, 1079,  193, 1075, 1066,  193,  193, 1076,  193,
     1071,  193,  193,  193,  193,  193, 1073, 1074,  193,  193,
      193, 1077,  193,  193, 1079,  193,  193, 1078, 1072,  193,
      193,  193,  193,  193,  193,  193,  193, 1079,  193,  193,
     1079, 1079,  193, 1079, 1074,  193,  193, 1079, 1077,  193,
      193,  193,  193, 1079, 1078,  193,  193, 1079,  193,  193,
     1079, 1079,  193, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079,  193, 1079, 1079, 1079,  193, 1079,  193, 1079,

     1079, 1079,  193,   46,   46,   46,   46,   46,   88, 1079,
     1079,   88,   88,  179,  179,  179, 1079,  179,  181, 1079,
      181,  181,  181,  184, 1079,  184,  184,  184,  193, 1079,
      193,  193,  193,    7, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079
    } ;

static const flex_int16_t yy_chk[4402] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1082,
       15,   17,   17,   18,   18,   21,   22,   21,   21,   30,
       23,   31,   27,   21,   42,   21,   44,   23,   27,   21,
       21,   55,   42,   55,   23,  389,   22,   23,   23,   49,
       49,  276,   21,   22,   21,   21,   30,   23,   31,   27,
       21,   42,   21,   44,   23,   27,   21,   21,   24,   42,
      188,   23,   24,   22,   23,   23,   24,   25,   28,   25,

       36,   98,   24,   99,   25,   24,   28,   50,   50,   25,
      187,   36,   28,   57,   57,   24,  100,   36,  184,   24,
       58,   58,   92,   24,   25,   28,   25,   36,   98,   24,
       99,   25,   24,   28,   29,   91,   25,   26,   36,   28,
       29,   29,   29,  100,   36,   26,   32,   29,   26,   33,
       32,   26,  103,   33,   26,   88,   32,   26,   85,   33,
       60,   29,   38,   59,   26,   56,   38,   29,   29,   29,
       52,   34,   26,   32,   29,   26,   33,   32,   26,  103,
       33,   26,   35,   32,   26,   34,   33,   86,   86,   38,
       35,   34,   34,   38,   35,   43,   43,   35,   34,  104,

       41,   39,   41,   39,   51,   41,   39,   90,   90,   35,
      182,  182,   34,   39,   39,  186,  186,   35,   34,   34,
       47,   35,   43,   43,   35,   70,  104,   41,   39,   41,
       39,   67,   41,   39,   71,   70,  108,   77,   67,  101,
       39,   39,   40,   40,   67,   70,   40,  101,   45,   40,
       40,   67,   70,  111,   71,   84,   40,   77,   67,   40,
       20,   71,   70,  108,   77,   67,  101,   19,   16,   40,
       40,   67,   70,   40,  101,   84,   40,   40,   67,   11,
      111,   71,   84,   40,   77,    7,   40,   61,   61,    4,
       61,   61,   61,   61,   61,   61,   68,   61,   61,   61,

       68,  105,   84,   61,   68,   61,   61,  115,  116,  102,
       68,   61,  102,   61,  109,  105,  109,   61,   61,  110,
       68,  117,  119,   68,  118,  118,    3,   68,  105,  110,
       61,   68,   61,   61,  115,  116,  102,   68,   61,  102,
       61,  109,  105,  109,   61,   61,  110,   68,  117,  119,
        0,  118,  118,   61,   62,   62,  110,   62,   62,   62,
       62,   62,   62,   72,   62,   62,   62,   72,   73,    0,
        0,   62,   73,   72,  112,    0,  121,   78,   73,  112,
      107,   78,    0,   72,  122,   76,  107,  107,   73,   76,
       72,   62,  123,    0,   72,   73,   76,   78,   62,   73,

       72,  112,   76,  121,   78,   73,  112,  107,   78,   76,
       72,  122,   76,  107,  107,   73,   76,    0,   62,  123,
       62,   63,  124,   76,   78,   63,    0,  125,   63,   76,
        0,    0,    0,   81,  126,   63,   76,   83,   63,   63,
       83,   83,   81,  114,   81,   63,    0,   81,   63,  124,
        0,  127,   63,   81,  125,   63,    0,   83,  114,  114,
       81,  126,   63,    0,   83,   63,   63,   83,   83,   81,
      114,   81,   63,   64,   81,   82,  128,   64,  127,   82,
       81,   64,  131,   82,   83,  114,  114,   64,  129,    0,
       64,  129,  133,  134,  136,    0,  130,   64,    0,   82,

       64,  130,   82,  128,   64,    0,   82,    0,   64,  131,
       82,  113,    0,  137,   64,  129,  113,   64,  129,  133,
      134,  136,  113,  130,   64,   65,   82,  138,  130,  113,
      139,  140,   65,  140,   65,    0,  142,    0,  113,   65,
      137,    0,  143,  113,   65,   65,    0,  144,    0,  113,
        0,    0,   65,  145,  138,  146,  113,  139,  140,   65,
      140,   65,  120,  142,  120,  141,   65,  141,  120,  143,
        0,   65,   65,   66,  144,  120,  147,   66,  141,  120,
      145,   66,  146,  148,   66,  149,    0,   66,  151,  120,
       66,  120,  141,   66,  141,  120,    0,   66,    0,    0,

       66,    0,  120,  147,   66,  141,  120,    0,   66,  152,
      148,   66,  149,  135,   66,  151,  153,   66,    0,  154,
       66,  157,  158,  135,   66,   69,   69,  155,  135,  135,
      156,  155,   69,   69,   69,  156,  152,  160,    0,   69,
      135,  161,  162,  153,  163,   69,  154,    0,  157,  158,
      135,  164,   69,   69,  155,  135,  135,  156,  155,   69,
       69,   69,  156,  166,  160,  159,   69,    0,  161,  162,
        0,  163,   69,   74,  159,  165,  167,   74,  164,  168,
      169,  170,  159,  171,  170,  172,  165,   74,    0,  173,
      166,  175,  159,   74,   74,  173,  176,   74,    0,    0,

       74,  159,  165,  167,   74,  177,  168,  169,  170,  159,
      171,  170,  172,  165,   74,  174,  173,  193,  175,  278,
       74,   74,  173,  176,   74,   75,   75,  279,  174,  194,
      194,  281,  177,    0,   75,    0,  282,  193,   75,    0,
        0,   75,  174,    0,  193,   75,  278,  195,    0,  284,
      194,    0,   75,   75,  279,  174,  194,  194,  281,    0,
      202,   75,  195,  282,  193,   75,  198,  195,   75,  198,
      198,  199,   75,   79,  195,   79,  284,  194,   79,  196,
      202,  196,  286,  287,  199,   79,   79,  202,  288,  195,
      198,  199,  289,  198,  195,   79,  198,  198,  199,  196,

       79,  291,   79,    0,    0,   79,  196,  202,  196,  286,
      287,  199,   79,   79,  197,  288,  292,  198,  199,  289,
        0,  197,   79,   80,   80,  207,  196,   80,  291,  197,
       80,   80,  293,  200,  197,  200,    0,   80,    0,    0,
       80,  197,  207,  292,    0,  207,  294,   80,  197,    0,
       80,   80,  207,    0,   80,  200,  197,   80,   80,  293,
      200,  197,  200,  203,   80,  201,  201,   80,    0,  207,
      203,  204,  207,  294,   80,  204,  203,  203,  295,  205,
      201,  206,  200,  203,  297,  201,  205,    0,  205,    0,
      203,  206,  201,  201,  208,  204,  228,  203,  204,  205,

      299,  206,  204,  203,  203,  295,  205,  201,  206,  208,
      203,  297,  201,  205,  208,  205,  228,    0,  206,    0,
        0,  208,  204,  228,    0,    0,  205,  299,  206,  210,
      212,  210,  211,    0,  300,  213,  208,    0,    0,    0,
      212,  208,  209,  228,  210,  210,  209,  209,  211,  213,
      212,  210,  211,  209,    0,  213,  210,  212,  210,  211,
      209,  300,  213,  214,  214,  214,  209,  212,    0,  209,
        0,  210,  210,  209,  209,  211,  213,  212,  210,  211,
      209,  215,  213,  215,    0,  214,  302,  209,    0,  217,
      214,  214,  214,  209,  218,  219,  217,  290,  220,  290,

      222,  218,    0,  215,    0,  219,    0,  222,  215,  217,
      215,  220,  214,  302,  218,  219,  217,    0,  220,  221,
      222,  218,  219,  217,  290,  220,  290,  222,  218,  221,
      215,  216,  219,  216,  222,    0,  217,  216,  220,  221,
        0,  218,  219,  234,  216,  220,  221,  222,  216,  223,
        0,  303,  224,  216,    0,    0,  221,    0,  216,  223,
      216,    0,  224,  234,  216,    0,  221,  225,  226,  223,
      234,  216,  224,  304,    0,  216,  223,  226,  303,  224,
      216,  225,  226,  232,  225,  227,  223,  225,  226,  224,
      234,    0,  232,  229,  225,  226,  223,  229,  233,  224,

      304,  227,  233,  232,  226,  227,  230,    0,  225,  226,
      232,  225,  227,  229,  225,  226,  305,  230,  233,  232,
      229,  235,  235,    0,  229,  233,  230,    0,  227,  233,
      232,    0,  227,  230,  237,  301,  237,    0,  237,  306,
      229,  235,    0,  305,  230,  233,    0,  237,  235,  235,
      301,  236,    0,  230,  231,  231,    0,  236,  237,  236,
      238,  237,  301,  237,  231,  237,  306,    0,  235,  231,
      231,  236,    0,  238,  237,  231,    0,  301,  236,  239,
      238,  231,  231,  240,  236,  237,  236,  238,  239,  241,
      307,  231,  240,  242,  243,    0,  231,  231,  236,  239,

      238,  243,  231,  240,  241,  246,  239,  238,  242,  241,
      240,    0,  308,  242,  243,  239,  241,  307,  244,  240,
      242,  243,  244,  245,  245,  246,  239,    0,  243,  309,
      240,  241,  246,  247,  247,  242,  241,    0,  248,  308,
      242,  243,  244,  245,  249,  244,  253,  311,  253,  244,
      245,  245,  246,  248,  247,  250,  309,  249,  248,  250,
      247,  247,  312,  251,  249,  248,  253,  251,    0,  244,
      245,  249,    0,  253,  311,  253,  313,    0,  252,  250,
      248,  247,  250,  251,  249,  248,  250,  252,  314,  312,
      251,  249,  252,  253,  251,  255,  254,  255,  252,  254,

      257,  256,    0,  313,  255,  252,  250,  315,    0,  316,
      251,  256,  255,  257,  252,  314,  254,  255,  317,  252,
      257,  256,  255,  254,  255,  252,  254,  257,  256,  258,
      260,  255,  259,  258,  315,  259,  316,  260,  256,  255,
      257,  262,    0,  254,  255,  317,  261,  257,  256,  318,
      260,    0,  319,  258,  261,  259,  258,  260,  264,  259,
      258,  262,  259,  263,  260,  261,  261,  321,  262,  264,
        0,  263,    0,  261,    0,  265,  318,  260,  264,  319,
      258,  261,  259,  263,    0,  264,  267,  267,  262,    0,
      263,  265,  261,  261,  321,  265,  264,  266,  263,  268,

      271,  266,  265,  268,  266,  264,    0,  267,    0,    0,
      263,  273,  270,  267,  267,  273,  269,  266,  265,  268,
      271,    0,  265,  269,  266,  270,  268,  271,  266,  269,
      268,  266,  270,  272,  267,  273,  269,  322,  273,  270,
      323,  324,  273,  269,  266,  325,  268,  271,  272,  326,
      269,  327,  270,  272,  328,  329,  269,  330,  331,  270,
      272,  332,  273,  269,  322,  333,  334,  323,  324,  335,
      336,  337,  325,  339,  340,  272,  326,  341,  327,  335,
      272,  328,  329,  342,  330,  331,  343,  344,  332,  345,
      346,  347,  333,  334,  348,  350,  335,  336,  337,  351,

      339,  340,  352,  353,  341,  354,  335,  355,  356,  357,
      342,  358,  359,  343,  344,  360,  345,  346,  347,  361,
      362,  348,  350,  363,  364,  366,  351,  367,  368,  352,
      353,  369,  354,  371,  355,  356,  357,  372,  358,  359,
      373,  374,  360,  377,  376,  377,  361,  362,  378,  379,
      363,  364,  366,  376,  367,  368,  380,  381,  369,  382,
      371,  383,  384,  386,  372,  385,  387,  373,  374,  385,
      377,  376,  377,    0,  390,  378,  379,  391,  392,  393,
      376,    0,  394,  380,  381,    0,  382,  501,  383,  384,
      386,  392,  385,  387,  390,  396,  385,  391,  392,  393,

      395,  390,  394,  398,  391,  392,  393,  395,  397,  394,
        0,    0,  397,  400,  501,  396,    0,  502,  392,    0,
      395,  390,  396,  398,  391,  392,  393,  395,  399,  394,
      398,  400,  397,  400,  395,  397,  401,  405,  399,  397,
      400,  404,  396,  401,  502,  402,  402,  395,  399,  403,
      398,  403,  503,  405,  404,  399,  401,  405,  400,  397,
      400,  404,  406,  401,  405,  399,  402,  409,  404,    0,
      401,  403,  402,  402,    0,  399,  403,  406,  403,  503,
      405,  404,  406,  401,  405,  408,  407,  409,  404,  406,
      407,  410,    0,  402,  409,  411,  412,  413,  403,  408,

        0,  413,    0,  412,  406,  408,  504,    0,    0,  406,
      407,  410,  408,  407,  409,  411,  412,  407,  410,  414,
        0,  413,  411,  412,  413,  415,  408,  415,  413,  416,
      412,  417,  408,  504,  414,  418,    0,  407,  410,  414,
      505,    0,  411,  412,  416,  421,  414,  415,  413,  416,
      418,  417,  415,    0,  415,  418,  416,  419,  417,  420,
      419,  414,  418,  422,    0,  421,  414,  505,  423,  425,
      420,  416,  421,  422,  415,  506,  416,  418,  417,  420,
      419,  424,  418,  422,  419,  424,  420,  419,  423,  425,
      422,  426,  421,  426,  428,  423,  425,  420,    0,  431,

      422,  428,  506,  427,    0,  424,  420,  419,  424,  429,
      422,  430,  424,  426,  428,  423,  425,  427,  426,  431,
      426,  428,  429,  427,    0,  430,  431,  433,  428,  429,
      427,  430,  424,  432,  507,  434,  429,  432,  430,    0,
      426,  428,  436,  434,  427,  436,  431,  433,  440,  429,
      427,  437,  430,    0,  433,  434,  429,  432,  430,  435,
      432,  507,  434,  440,  432,  436,  435,  437,  440,  436,
      434,  437,  436,    0,  433,  440,  441,  438,  437,  435,
      438,  439,  434,    0,  432,  439,  435,    0,    0,  442,
      440,  441,  436,  435,  437,  440,  441,  438,  437,  443,

      444,  439,  442,  441,  438,  443,  435,  438,  439,  442,
      444,  445,  439,  446,  447,  448,  442,    0,  441,  443,
      444,    0,  509,  441,  438,  448,  443,  444,  439,  442,
      451,  445,  443,  446,  447,  448,  442,  444,  445,  449,
      446,  447,  448,    0,  450,  453,  443,  444,  452,  509,
      451,    0,  448,  450,  510,  449,    0,  451,  445,  449,
      446,  447,  448,  452,  450,  453,  449,    0,  452,  454,
      456,  450,  453,  454,  456,  452,    0,  451,  455,  455,
      450,  510,  449,  457,  513,  457,  449,    0,  514,  454,
      452,  450,  453,  459,  456,  452,  454,  456,  461,  455,

      454,  456,  458,  457,  458,  455,  455,  462,  460,  459,
      457,  513,  457,  459,  461,  514,  454,  463,  461,  464,
      459,  456,  458,  460,  463,  461,  455,  462,  460,  458,
      457,  458,  464,  465,  462,  460,  459,  463,  466,  464,
      459,  461,  467,    0,  463,  461,  464,  465,  468,  458,
      460,  463,  468,  465,  462,  460,  470,  475,  466,  464,
      465,  469,  467,    0,  463,  466,  464,  470,    0,  467,
      469,    0,  468,  515,  465,  468,  470,  475,  471,  468,
      465,  469,  477,  470,  475,  466,  471,  472,  469,  467,
      474,  472,  473,  474,  470,  478,  476,  469,  471,  468,

      515,  516,  477,  470,  475,  471,  476,  473,  469,  477,
      474,  472,  473,  471,  472,  478,  476,  474,  472,  473,
      474,  480,  478,  476,    0,  471,  479,  518,  516,  477,
      481,  483,  487,  476,  473,  519,  480,  474,  472,  473,
      482,  480,  478,  476,  479,  481,  479,  482,  480,  485,
      481,  483,  487,  479,  518,  484,  520,  481,  483,  487,
      482,  486,  519,  480,  485,  488,  484,  482,  480,  485,
      486,  479,  481,  479,  482,  484,  485,  481,  483,  487,
      489,  486,  484,  520,  521,  488,  492,  482,  486,  489,
      492,  485,  488,  484,  490,  491,  485,  486,  524,    0,

      489,    0,  484,  494,  490,  491,  490,  489,  486,  493,
      492,  521,  488,  492,  490,  491,  489,  492,  493,  494,
      496,  490,  491,  494,  497,  524,  495,  489,  495,  493,
      494,  490,  491,  490,  525,    0,  493,  492,  496,  497,
      496,  490,  491,  526,  497,  493,  494,  496,  495,  498,
      494,  497,    0,  495,  499,  495,  493,  499,  498,  500,
      529,  525,  498,  530,  531,  496,  497,  496,  532,  498,
      526,  497,  500,  533,  499,  495,  498,  534,  535,  500,
      536,  499,  538,  541,  499,  498,  500,  529,  542,  498,
      530,  531,  544,  546,  548,  532,  498,  549,  550,  500,

      533,  499,  551,  552,  534,  535,  500,  536,  555,  538,
      541,  553,  559,  561,  563,  542,  564,  564,  565,  544,
      546,  548,  553,  566,  549,  550,  568,  569,  570,  551,
      552,  571,  572,  574,  575,  555,  576,  577,  553,  559,
      561,  563,  578,  564,  564,  565,  579,  580,  581,  553,
      566,  583,  584,  568,  569,  570,  585,  586,  571,  572,
      574,  575,  589,  576,  577,  591,  592,  593,  594,  578,
      595,  596,  597,  579,  580,  581,  598,  600,  583,  584,
      602,    0,  606,  585,  586,  608,    0,  710,  605,  589,
      609,  611,  591,  592,  593,  594,  612,  595,  596,  597,

      607,  605,  606,  598,  600,  608,  610,  602,  605,  606,
      609,  611,  608,  607,  710,  605,  612,  609,  611,  610,
      607,  613,  615,  612,  616,  613,  610,  607,  605,  606,
      614,    0,  608,  610,  614,  605,  621,  609,  611,  712,
      607,  613,  615,  612,  616,    0,  610,  607,  613,  615,
      617,  616,  613,  610,  614,    0,  621,  614,  617,  618,
      619,  614,  620,  621,    0,    0,  712,    0,  613,  615,
      617,  616,  618,  624,  623,  619,  620,  617,  626,  618,
      619,  614,  620,  621,  622,  617,  618,  619,  624,  620,
      623,  622,  625,  624,  623,    0,  625,  617,  626,  618,

      624,  623,  619,  620,  622,  626,  618,  619,  627,  620,
      628,  622,  628,  631,  714,  624,  625,  623,  622,  625,
      624,  623,  629,  625,  632,  626,  629,  630,  627,  633,
      633,  622,  628,  631,  630,  627,    0,  628,    0,  628,
      631,  714,  629,  625,  632,    0,    0,  630,  636,  629,
      633,  632,  634,  629,  630,  627,  633,  633,    0,  628,
      631,  630,  635,  634,  636,  637,    0,  640,  636,  629,
        0,  632,  634,  635,  630,  636,  641,  633,  643,  634,
      637,    0,  635,  715,  638,  637,  642,  640,  638,  635,
      634,  636,  637,  639,  640,  636,  641,  639,  643,  634,

      635,  642,  644,  641,    0,  643,  642,  637,  638,  635,
      715,  638,  637,  642,  640,  638,  646,  639,  647,  649,
      639,  651,  644,  641,  639,  643,  645,  646,  642,  644,
      645,  648,  650,  642,    0,  638,  646,    0,  647,  649,
      648,  651,  650,  646,  639,  647,  649,    0,  651,  644,
      645,  648,  650,  645,  646,  652,    0,  645,  648,  650,
      653,  655,    0,  646,  654,  647,  649,  648,  651,  650,
      658,    0,  656,  653,  655,  652,  716,  645,  648,  650,
      653,  655,  652,  654,  654,  656,    0,  653,  655,  659,
      658,  654,  656,  657,  660,  657,  659,  658,  661,  656,

      653,  655,  652,  716,  662,  717,  657,  653,  655,  659,
      654,  654,  656,  657,  660,  663,  659,  658,  661,  656,
      657,  660,  657,  659,  662,  661,  664,  665,  666,  667,
      663,  662,  717,  657,  665,  663,  659,    0,    0,    0,
      657,  660,  663,    0,  668,  661,  664,  665,  666,  667,
      671,  662,  670,  664,  665,  666,  667,  663,  668,  668,
      669,  665,  663,  669,  668,  670,  672,    0,  672,  673,
      671,  668,  670,  664,  665,  666,  667,  671,  718,  670,
      669,  674,    0,    0,    0,  668,  668,  669,  672,  673,
      669,  668,  670,  672,  674,  672,  673,  671,  675,  670,

      677,  674,  676,  719,  680,  718,    0,  669,  674,  678,
      676,  675,  680,  678,    0,  672,  673,    0,  675,  679,
      677,  674,  676,  679,  680,  675,    0,  677,  674,  676,
      719,  680,  720,  678,    0,  681,  678,  676,  675,  680,
      678,  682,  722,  679,  683,  675,  679,  677,  681,  676,
      679,  680,  683,  686,  684,  681,  682,  687,    0,  720,
      678,  682,  681,  684,  683,  685,  689,  685,  682,  722,
      679,  683,  723,  686,  684,  681,  691,  687,    0,  683,
      686,  684,  681,  682,  687,  688,  689,  685,  682,  688,
      684,  683,  685,  689,  685,  692,  691,  690,  694,  723,

      686,  684,  724,  691,  687,  688,  693,  690,  695,    0,
      695,  697,  688,  689,  685,  692,  688,  690,  694,  696,
      693,  726,  692,  691,  690,  694,  693,  697,  696,  724,
      695,  697,  688,  693,  690,  695,  698,  695,  697,  696,
      698,  699,  692,    0,  690,  694,  696,  693,  726,  700,
      701,  700,    0,  693,  697,  696,  699,  695,  697,  702,
      698,  699,  702,  698,  703,  704,  696,  698,  699,  700,
      701,  727,  728,  705,  706,  707,  700,  701,  700,  702,
      729,  704,  730,  699,  703,  704,  702,  698,  699,  702,
      708,  703,  704,  705,  706,  707,  700,  701,  727,  728,

      705,  706,  707,  731,  732,  733,  702,  729,  704,  730,
      708,  703,  704,  734,  735,  738,  740,  708,  741,  743,
      705,  706,  707,  746,  747,  748,  749,  754,  756,  757,
      731,  732,  733,  758,  761,  762,  763,  708,  764,  765,
      734,  735,  738,  740,  767,  741,  743,  768,  769,  770,
      746,  747,  748,  749,  754,  756,  757,  771,  772,  773,
      758,  761,  762,  763,  774,  764,  765,  775,  777,  778,
      779,  767,  781,  782,  768,  769,  770,  783,  785,    0,
        0,  786,  787,  786,  771,  772,  773,  789,    0,    0,
        0,  774,  788,    0,  775,  777,  778,  779,  785,  781,

      782,  786,  787,  790,  783,  785,  791,  789,  786,  787,
      786,  792,  788,  788,  789,  793,  793,  795,    0,  788,
      792,  861,    0,  790,    0,  785,  791,  795,  786,  787,
      790,  792,  794,  791,  789,  796,  793,  795,  792,  788,
      788,  794,  793,  793,  795,  797,  798,  792,  861,  800,
      790,  801,  794,  791,  795,  796,  798,    0,  792,  794,
      799,  804,  796,  793,  795,  797,  798,  799,  794,  800,
      802,  801,  797,  798,  862,  803,  800,    0,  801,  794,
      799,  804,  796,  798,  803,  802,  806,  799,  804,  807,
      802,  864,  797,  798,  799,  803,  800,  802,  801,  805,

      808,  862,  803,  805,  807,  865,  806,  799,  804,  807,
        0,  803,  802,  806,  809,  808,  807,  802,  864,  805,
      808,  811,  803,  811,  812,  810,  805,  808,  809,  810,
      805,  807,  865,  806,  809,    0,  807,  813,  815,    0,
      866,  809,  808,  811,  812,  810,  805,  808,  811,  817,
      811,  812,  810,  814,  818,  809,  810,  813,  815,    0,
      814,  809,  817,  819,  813,  815,  816,  866,  816,  817,
      811,  812,  810,  814,  818,    0,  817,  820,  819,  821,
      814,  818,  823,  819,  813,  815,  816,  814,  822,  817,
      819,    0,  867,  816,  868,  816,  817,  820,  824,  821,

      814,  818,  823,  822,  820,  819,  821,  825,  822,  823,
      819,  826,  824,  816,  825,  822,  827,  828,  824,  867,
      829,  868,  830,    0,  820,  824,  821,  825,  831,  823,
      822,  826,    0,  835,  825,  822,  827,  828,  826,  824,
      829,  825,  830,  827,  828,  824,  832,  829,  831,  830,
      832,  834,  836,  835,  825,  831,  833,    0,  826,  833,
      835,  837,  870,  827,  828,  840,  834,  829,    0,  830,
      832,  834,  836,  832,  838,  831,  833,  832,  834,  836,
      835,  837,  839,  833,  842,  840,  833,  838,  837,  870,
        0,    0,  840,  834,  838,  839,  841,  832,  834,  836,

      841,  838,  839,  833,  842,  845,  843,    0,  837,  839,
      843,  842,  840,    0,  838,  847,  841,  844,  844,  847,
      845,  838,  839,  841,  871,  845,    0,  841,    0,  839,
      843,  842,  845,  843,  846,  846,  848,  843,  844,  847,
      849,    0,  847,  841,  844,  844,  847,  845,  852,  850,
      848,  871,  845,  849,  851,  846,  848,  843,  851,  853,
      849,  846,  846,  848,  850,  844,  847,  849,  852,  850,
      855,  854,  854,  856,  857,  852,  850,  848,  851,  853,
      849,  851,  846,  848,  874,  851,  853,  849,  857,  860,
      855,  850,  854,  856,  857,  852,  850,  855,  854,  854,

      856,  857,  876,  858,  859,  851,  853,  858,  859,  860,
      879,  874,  881,  882,  885,  857,  860,  855,  888,  854,
      856,  857,  889,  892,  893,  895,  896,  858,  859,  876,
      858,  859,  897,  899,  858,  859,  860,  879,  900,  881,
      882,  885,  904,  906,  907,  888,  908,  913,  914,  889,
      892,  893,  895,  896,  858,  859,  916,  915,  917,  897,
      899,  915,  920,  919,    0,  900,    0,  919,    0,  904,
      906,  907,    0,  908,  913,  914,  916,  918,  917,  921,
      923,  915,  920,  916,  915,  917,  918,  919,  915,  920,
      919,  922,  969,  921,  919,  926,  972,  918,  922,  921,

      923,  925,    0,  916,  918,  917,  921,  923,  915,  920,
      924,  922,  924,  918,  919,  926,  925,    0,  922,  969,
      921,  925,  926,  972,  918,  922,  921,  923,  925,  927,
      929,  928,  924,  928,  931,  930,    0,  924,  922,  924,
        0,    0,  926,  925,  930,  932,  933,  934,  925,  927,
      929,    0,    0,  928,  931,  930,  927,  929,  928,  924,
      928,  931,  930,  937,  936,  932,  933,  934,  938,  935,
        0,  930,  932,  933,  934,    0,  927,  929,  935,  936,
      928,  931,  930,  937,  936,    0,    0,  939,  938,  935,
      937,  936,  932,  933,  934,  938,  935,  940,  941,  942,

      943,  944,  945,    0,    0,  935,  936,  939,    0,  947,
      937,  936,  942,  947,  939,  938,  935,  940,  941,  942,
      943,  944,  945,  946,  940,  941,  942,  943,  944,  945,
      946,  948,  950,  947,  939,  951,  947,    0,    0,  942,
      947,  949,    0,  946,  940,  941,  942,  943,  944,  945,
      946,  948,  950,  952,    0,  951,  949,  946,  948,  950,
      947,  949,  951,  953,  955,  953,  956,  954,  949,  957,
      946,  976,    0,  952,    0,    0,    0,  959,  948,  950,
      952,  954,  951,  949,  955,  953,  956,  954,  949,  957,
      953,  955,  953,  956,  954,  958,  957,  959,  976,  960,

      952,  961,  958,  960,  959,  961,    0,  963,  954,    0,
        0,  955,  953,  956,  954,  958,  957,  964,  962,  965,
      966,    0,  958,  960,  959,  961,  960,  963,  961,  958,
      960,  978,  961,  962,  963,  967,  968,  964,  962,  965,
      966,  979,  958,  968,  964,  962,  965,  966,  967,  985,
      960,  987,  961,  988,  963,  967,  968,  991,  978,  994,
      962,  995,  967,  968,  964,  962,  965,  966,  979,  996,
      968, 1000,  999, 1001, 1002,  967,  985, 1003,  987,    0,
      988, 1002,  967,  968,  991, 1004,  994,  999,  995, 1005,
     1007, 1000,  999, 1001, 1002,    0,  996, 1003, 1000,  999,

     1001, 1002, 1006, 1010, 1003, 1004, 1006, 1008, 1002, 1005,
     1007, 1009, 1004, 1009,  999, 1011, 1005, 1007, 1000,  999,
     1001, 1002, 1008, 1010, 1003, 1012, 1006, 1008, 1013, 1006,
     1010, 1009, 1004, 1006, 1008, 1011, 1005, 1007, 1009, 1014,
     1009, 1015, 1011, 1015, 1016, 1012,    0, 1017, 1013, 1008,
     1010, 1029, 1012, 1006, 1008, 1013, 1018, 1019, 1009, 1014,
     1017, 1020, 1011, 1015, 1016, 1021, 1014, 1017, 1015, 1022,
     1015, 1016, 1012, 1023, 1017, 1013, 1018, 1019, 1029, 1026,
     1021, 1020, 1024, 1018, 1019, 1021, 1014, 1017, 1020, 1022,
     1015, 1016, 1021, 1023, 1017, 1024, 1022, 1025, 1027, 1026,

     1023, 1028, 1024, 1018, 1019, 1025, 1026, 1021, 1020, 1024,
     1030, 1031, 1021, 1034, 1036, 1038, 1022, 1025, 1027, 1039,
     1023, 1028, 1024, 1041, 1025, 1027, 1026, 1041, 1028, 1024,
        0, 1042, 1025, 1044,    0, 1042, 1045, 1030, 1031, 1047,
     1034, 1036, 1038, 1041, 1025, 1027, 1039, 1053, 1028, 1043,
     1041, 1042, 1046, 1044, 1041, 1048, 1045, 1049, 1042, 1047,
     1044, 1050, 1042, 1045, 1043, 1052, 1047, 1046, 1048, 1043,
     1041,    0, 1046, 1054, 1053, 1048, 1043, 1049, 1042, 1046,
     1044, 1050, 1048, 1045, 1049, 1052, 1047, 1051, 1050, 1055,
     1057, 1043, 1052, 1060, 1046, 1048, 1043, 1067, 1051, 1046,

     1054, 1068, 1048, 1060, 1049,    0, 1061, 1051, 1050, 1062,
        0, 1063, 1052, 1060, 1051, 1065, 1055, 1057,    0, 1066,
     1060, 1061,    0, 1064, 1067, 1051, 1061, 1072, 1068, 1062,
     1060, 1063, 1071, 1061, 1051, 1065, 1062, 1064, 1063, 1066,
     1060, 1071, 1065, 1064,    0, 1073, 1066, 1072, 1061, 1074,
     1064, 1077, 1071, 1061, 1072, 1078, 1062,    0, 1063, 1071,
        0,    0, 1065,    0, 1064, 1073, 1066,    0, 1071, 1074,
     1064, 1077, 1073,    0, 1072, 1078, 1074,    0, 1077, 1071,
        0,    0, 1078,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1073,    0,    0,    0, 1074,    0, 1077,    0,

        0,    0, 1078, 1080, 1080, 1080, 1080, 1080, 1081,    0,
        0, 1081, 1081, 1083, 1083, 1083,    0, 1083, 1084,    0,
     1084, 1084, 1084, 1085,    0, 1085, 1085, 1085, 1086,    0,
     1086, 1086, 1086, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2001 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2015 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2302 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1080 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1079 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
/* */
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(AGGREGATION)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(CARDINALITY)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(ENCODING)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DICT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
/* */
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 139:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 146:
#line 211 "flex_lexer.l"
case 147:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 236 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3155 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1080 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1080 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1079);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 241 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

