#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 155
#define YY_END_OF_BUFFER 156
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1060] =
    {   0,
        0,    0,  152,  152,    2,    2,  156,  154,    4,    4,
      154,  154,  144,  150,  144,  144,  147,  144,  144,  144,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  144,  152,  153,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  139,    0,    1,  147,
      146,  145,  141,  140,  138,  142,  149,  149,  149,  149,

      149,  149,  129,  149,  130,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      131,  149,  149,  132,  133,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  134,  135,  136,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  137,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  143,  152,  151,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  148,  145,  114,  149,  115,  149,  149,  116,
      149,  117,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  118,  149,  119,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  120,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  121,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  122,  149,  149,  123,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  124,  149,  149,  125,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  126,  149,  149,  149,  149,  127,  149,  149,  149,
      149,  128,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  149,  149,  149,  149,

      149,  149,   83,  149,  149,   84,   85,  149,  149,  149,
      149,   86,  149,  149,  149,  149,   87,   88,  149,  149,
      149,   89,   90,  149,  149,  149,  149,  149,  149,  149,
      149,   91,  149,   92,   93,  149,  149,   94,  149,   95,
      149,   96,  149,  149,  149,  149,  149,  149,   97,  149,
       98,   99,  100,  149,  101,  149,  102,  149,  149,  149,
      149,  103,  149,  149,  149,  149,  149,  104,  149,  149,
      149,  149,  149,  149,  149,  149,  105,  149,  149,  149,
      149,  106,  107,  108,  109,  149,  149,  149,  149,  149,
      149,  149,  149,  110,  149,  111,  149,  112,  113,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,   60,   61,  149,   62,  149,  149,  149,  149,
      149,  149,  149,   63,  149,  149,  149,   64,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,   65,   66,
      149,   67,  149,  149,   68,  149,   69,   70,  149,  149,
      149,  149,   71,   72,   73,   74,  149,   75,  149,  149,
      149,   76,   77,  149,  149,  149,  149,  149,   78,  149,
      149,  149,  149,  149,   79,  149,  149,  149,   80,  149,
      149,  149,   81,  149,  149,  149,   82,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  149,   34,  149,  149,  149,   35,  149,   36,
      149,  149,   37,   38,  149,   39,  149,   40,   41,  149,
       42,  149,  149,   43,   44,  149,   45,   46,  149,  149,
       47,   48,  149,  149,   49,  149,  149,  149,   50,  149,
       51,   52,   53,   54,  149,   55,  149,  149,  149,   56,

       57,   58,   59,  149,  149,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   16,   17,
      149,   18,   19,   20,  149,   21,  149,  149,   22,   23,
       24,   25,   26,  149,   27,  149,  149,   28,   29,  149,
       30,   31,  149,  149,  149,   32,   33,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  149,  149,   11,   12,
      149,   13,  149,   14,  149,  149,   15,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  149,  149,
        8,  149,    9,   10,    2,    2,    2,    2,    2,    2,
      149,    6,    7,    2,    2,    2,    5,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1067] =
    {   0,
        0,    0,  470,  466,   67,    0,  470, 4209,  133,  135,
      428,    0, 4209, 4209,  131,  400,  133,  132,  387,  357,
      129,  129,  137,  135,  145,  196,  176,  184,  217,  124,
      141,  201,  213,  238,  255,  250,    0,  243,  269,  312,
      251,  191,  273,  144,  291,    0,  342,    0,  200,  212,
      332,  315,    0,    0,  212,  296,  207,  247,  291,  284,
      370,  437,  491,  543,  591,  643,  355,  301,  691,  300,
      266,  366,  429,  743,  791,  438,  367,  442,  841,  893,
      479,  537,  450,  388,  210,  333, 4209,  262, 4209,  338,
      245,  237, 4209, 4209, 4209, 4209,    0,  147,  178,  365,

      445,  195,  316,  481,    0,  535,  323,  491,  492,  306,
      358,  544,  548,  358,  375,  376,  449,  393,  604,  402,
      409,  430,  470,  485,  496,  497,  498,  538,  545,  528,
        0,  546,  554,  646,  578,  589,  574,  594,  591,  653,
      583,  592,  594,  591,  592,  602,  617,  616,    0,  642,
      633,  639,  658,  693,  687,  655,  655,  706,  657,  682,
      706,  706,  699,  726,  708,  701,  699,  698,  740,  716,
      742,  742,  754,  750,  736,  756, 4209,    0, 4209,    0,
      349,    0,  203,    0,  353,  190,  161,    0,    0,    0,
        0,  768,  802,  783,  806,  836,  837,  845,  880,  769,

      891,  914,  919,  942,  943,  929,  995,  980,  965, 1004,
      999, 1034, 1030, 1084, 1038, 1049, 1043,  847, 1087, 1066,
     1092, 1098, 1103, 1128, 1116,  855, 1044, 1138, 1187, 1152,
     1074, 1133, 1170, 1183, 1224, 1192, 1157, 1226, 1221, 1225,
     1250, 1258, 1255, 1259, 1288, 1274, 1280, 1299, 1309, 1303,
     1331, 1325, 1334, 1337, 1353, 1342, 1370, 1375, 1379, 1383,
     1388, 1401, 1391, 1420, 1432, 1429, 1437, 1442, 1416, 1446,
     1445,    0, 4209,  145,    0,  757,    0,  758,  786,    0,
      801,    0,  832,  828,  851,  910,  947,  908,  934,  942,
      963,  969,    0,  998,    0, 1028, 1056, 1167, 1129, 1126,

     1146, 1136, 1184, 1189, 1211, 1205,    0, 1241, 1265, 1271,
     1277, 1370, 1373, 1378, 1453, 1474,    0, 1466, 1468, 1481,
     1465, 1480, 1481, 1471, 1472, 1477, 1485, 1484, 1495, 1496,
     1498, 1499, 1484, 1494,    0, 1489, 1506, 1503, 1512, 1519,
     1514, 1517, 1504, 1509, 1512,    0, 1522, 1519, 1521, 1537,
     1539, 1544, 1532, 1533, 1537, 1552, 1534, 1547, 1552, 1543,
     1554,    0, 1539, 1543, 1545, 1554,    0, 1552, 1550, 1560,
     1570,    0, 1573, 1579, 1564, 1582, 1574, 1570, 1595, 1576,
     1580, 1589, 1596, 1590,    0,  140, 1604, 1607, 1608, 1612,
     1633, 1617, 1623, 1636, 1638, 1661, 1642, 1672, 1684, 1673,

     1674, 1687, 1695, 1696, 1705, 1724, 1726, 1728, 1740, 1730,
     1741, 1749, 1727, 1765, 1759, 1770, 1778, 1784, 1782, 1793,
     1795, 1803, 1818, 1819, 1814, 1835, 1824, 1837, 1836, 1867,
     1870, 1872, 1858, 1886, 1891, 1873, 1908, 1912, 1921, 1924,
     1909, 1910, 1926, 1960, 1942, 1963, 1947, 1964, 1966, 1978,
     1976, 1981, 2012, 2015, 2000, 2018, 2030, 2029, 2048, 2051,
     2052, 2034, 2063, 2074, 2080, 2085, 2084, 2106, 2088, 2114,
     2118, 2136, 2120, 2122, 2137, 2139, 2160, 2151, 2150, 2168,
     2174, 2190, 2176, 2191, 2200, 2212, 2225, 2233, 2234, 2228,
     2265, 2246, 2267, 2286, 2297, 2276, 1601, 1839, 1860, 1945,

     1982, 2026,    0, 2027, 2044,    0,    0, 2078, 2112, 2177,
     2190,    0, 2206, 2198, 2215, 2246,    0,    0, 2252, 2270,
     2271,    0,    0, 2284, 2273, 2277, 2282, 2287, 2308, 2311,
     2308,    0, 2303,    0,    0, 2323, 2309,    0, 2312,    0,
     2318,    0, 2330, 2319, 2317, 2324, 2325, 2337,    0, 2333,
        0,    0,    0, 2326,    0, 2335,    0, 2343, 2337, 2346,
     2340,    0, 2356, 2356, 2345, 2347, 2353,    0, 2366, 2375,
     2364, 2360, 2359, 2367, 2373, 2386,    0, 2386, 2386, 2391,
     2382,    0,    0, 2379,    0, 2396, 2386, 2380, 2401, 2388,
     2402, 2405, 2403,    0, 2391,    0, 2408,    0,    0, 2416,

     2425, 2426, 2427, 2428, 2437, 2439, 2440, 2462, 2449, 2450,
     2480, 2478, 2479, 2481, 2483, 2504, 2513, 2517, 2516, 2514,
     2535, 2547, 2546, 2558, 2548, 2549, 2571, 2579, 2589, 2587,
     2604, 2588, 2625, 2602, 2612, 2613, 2623, 2637, 2642, 2647,
     2641, 2666, 2653, 2671, 2656, 2677, 2679, 2690, 2701, 2707,
     2729, 2696, 2705, 2730, 2733, 2735, 2744, 2745, 2761, 2746,
     2763, 2784, 2767, 2789, 2785, 2803, 2800, 2821, 2822, 2837,
     2813, 2843, 2855, 2838, 2854, 2856, 2879, 2877, 2891, 2880,
     2888, 2892, 2905, 2910, 2909, 2921, 2931, 2922, 2946, 2934,
     2959, 2964, 2962, 2963, 2974, 2985, 2976, 2997, 2980, 2998,

     2999, 3008,    0,    0, 2394,    0, 2492, 2493, 2544, 2555,
     2574, 2685, 2711,    0, 2741, 2772, 2817,    0, 2913, 2931,
     2995, 3010, 3016, 3005, 3014, 3016, 3027, 3035,    0,    0,
     3027,    0, 3034, 3024,    0, 3023,    0,    0, 3024, 3042,
     3034, 3042,    0,    0,    0,    0, 3050,    0, 3055, 3049,
     3038,    0,    0, 3054, 3046, 3049, 3067, 3064,    0, 3074,
     3072, 3057, 3074, 3078, 3068, 3070, 3069, 3089,    0, 3087,
     3089, 3090,    0, 3077, 3096, 3097,    0, 3096, 3102, 3104,
     3106, 3107, 3108, 3121, 3138, 3136, 3140, 3139, 3142, 3161,
     3173, 3170, 3174, 3176, 3175, 3179, 3205, 3192, 3213, 3214,

     3210, 3227, 3244, 3243, 3245, 3246, 3248, 3276, 3281, 3259,
     3262, 3287, 3297, 3298, 3299, 3302, 3330, 3300, 3311, 3312,
     3315, 3333, 3336, 3352, 3351, 3367, 3341, 3365, 3366, 3376,
     3384, 3390, 3401, 3395, 3406, 3419, 3420, 3444, 3434, 3436,
     3438, 3459, 3472, 3449, 3455, 3488, 3473, 3484, 3489, 3498,
     3517, 3507, 3105,    0, 3274, 3377, 3425, 3483, 3498,    0,
     3514, 3507,    0,    0, 3525,    0, 3517,    0,    0, 3528,
        0, 3520, 3518,    0,    0, 3518,    0,    0, 3528, 3542,
        0,    0, 3536, 3550,    0, 3532, 3548, 3531,    0, 3554,
     3543,    0,    0,    0, 3551,    0, 3563, 3565, 3547,    0,

        0,    0,    0, 3550, 3559, 3567, 3571, 3572, 3580, 3577,
     3582, 3605, 3595, 3613, 3601, 3610, 3626, 3636, 3631, 3635,
     3645, 3647, 3649, 3650, 3659, 3684, 3680, 3681, 3685, 3689,
     3690, 3702, 3693, 3698, 3703, 3714, 3739, 3724, 3738, 3743,
     3747, 3752, 3756, 3755, 3757, 3768, 3773, 3791, 3787, 3801,
     3809, 3822, 3792, 3806, 3823, 3827, 3831, 3845,    0,    0,
     3657,    0,    0,    0, 3723,    0, 3718, 3787,    0,    0,
        0,    0,    0, 3810,    0, 3800, 3830,    0,    0, 3826,
        0,    0, 3833, 3847, 3859,    0,    0, 3860, 3861, 3876,
     3875, 3877, 3885, 3893, 3891, 3894, 3899, 3915, 3917, 3925,

     3927, 3929, 3933, 3930, 3948, 3939, 3943, 3951, 3967, 3965,
     3969, 3984, 3973, 3979, 3983, 4001, 3859, 3976,    0,    0,
     3987,    0, 3992,    0, 3987, 4002,    0, 4015, 4023, 4017,
     4025, 4036, 4027, 4053, 4041, 4049, 4071, 4057, 4018, 4058,
        0, 4045,    0,    0, 4075, 4067, 4079, 4101, 4092, 4103,
     4061,    0,    0, 4105, 4107, 4111,    0, 4113, 4209, 4178,
     4183,  135, 4188, 4193, 4198, 4203
    } ;

static const flex_int16_t yy_def[1067] =
    {   0,
     1059,    1, 1060, 1060, 1059,    5, 1059, 1059, 1059, 1059,
     1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1059, 1063, 1059, 1064, 1064, 1059,
     1064, 1065, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1066, 1066,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1064, 1059, 1059, 1061, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1059, 1063, 1059, 1064,
     1064, 1064, 1065, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1064, 1059, 1059, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1064, 1064,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1062, 1062,
     1062, 1062, 1062, 1062,   62,   62,   62,   62,   62,   62,
     1062, 1062, 1062,   62,   62,   62, 1062,   62,    0, 1059,
     1059, 1059, 1059, 1059, 1059, 1059
    } ;

static const flex_int16_t yy_nxt[4277] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  111,  386,
      106,  136,  112,  100,  274,  101,  113,  107,  137,  102,
      103,  176,  114,  275,  108,  115,  105,  109,  110,  116,
      386,  117,   98,  104,   99,  111,  118,  106,  136,  112,
      100,  119,  101,  113,  107,  137,  102,  103,  176,  114,
      275,  108,  115,  105,  109,  110,  116,  128,  117,  186,

      126,  181,   86,  118,  172,  129,  127,  385,  119,  120,
      276,  130,  173,   86,   86,  187,  185,  121,  138,  184,
      122,  185,  139,  123,  128,  281,  124,  126,  140,  125,
      141,  172,  129,  127,  142,  131,  120,  276,  130,  173,
      143,  132,  133,  134,  121,  138,  274,  122,  135,  139,
      123,  144,  281,  124,   91,  140,  125,  141,  188,  189,
      155,  142,  131,  152,  156,  145,  273,  143,  132,  133,
      134,  146,  147,  148,  153,  135,  272,  169,  144,  170,
      154,  149,  171,  232,  157,  150,  158,  155,  151,  159,
      152,  156,  145,  174,  175,  191,  160,  161,  146,  147,

      148,  153,  190,  192,  169,  186,  170,  154,  149,  171,
      232,  157,  150,  158,  223,  151,  159,  192,  192,  180,
      174,  175,  224,  160,  161,  162,  163,  231,  225,  164,
      192,  282,  165,  166,   86,   86,  288,  192,  192,  167,
      293,  223,  168,  182,  192,  192,   92,   90,  179,  224,
      181,   86,  162,  163,  231,  225,  164,  177,  282,  165,
      166,  187,  185,  288,  192,  192,  167,  293,   96,  168,
      180,  180,  192,  180,  180,  180,  180,  180,  180,  221,
      180,  180,  180,  233,  192,  222,  193,  234,  194,  277,
      294,  303,  192,  235,  195,  295,  196,  278,   95,  192,

      197,  198,  304,  192,  192,  271,  221,  305,  308,   91,
      233,  192,  222,  193,  234,  194,  277,  294,  303,  192,
      235,  195,  295,  196,  278,  192,  314,  197,  198,  304,
      192,  192,  271,  315,  305,  308,  180,  180,  180,   87,
      180,  180,  180,  180,  180,  180,  236,  180,  180,  180,
      237,  247,  192,  314,  199,  192,  238,  316,  279,  250,
      315,  280,  248,  251,  306,  307,  192,  192,  249, 1059,
      269,  270,   47,  236,  200,  192,   47,  237,  247,  192,
     1059,  199,  192,  238,  316,  279,  250,  192,  280,  248,
      251,  306,  307,  192,  192,  249,  192,  269,  270,  283,

      317,  200,  192,  180,  201,  264,  192,  265,  192,  291,
      266,  202,  318,  284,  192,  289,  192,  290,  203,  292,
      319,  204,  205,  192,  320,  321,  283,  317,  192, 1059,
     1059,  201,  264, 1059,  265,  192,  291,  266,  202,  318,
      284, 1059,  289,  192,  290,  203,  292,  319,  204,  205,
      267,  320,  321, 1059,  192,  192,  206,  296,  268,  285,
      207,  326,  297,  300,  208,  286,  287,  327,  298,  322,
      209,  324,  323,  210,  192,  299,  325,  267,  301,  302,
      192,  192,  328,  206,  296,  268,  285,  207,  326,  297,
      300,  208,  286,  287,  327,  298,  322,  209,  324,  323,

      210,  192,  299,  325,  333,  301,  302,  192,  192,  328,
      334,  335,  336,  342,  337,  211,  338,  212,  343,  309,
      344,  310,  213,  345,  346,  311,  347,  214,  192, 1059,
      348,  333,  312, 1059,  349,  192,  313,  334,  335,  336,
      342,  337,  211,  338,  212,  343,  309,  344,  310,  213,
      345,  346,  311,  347,  214,  192,  215,  348,  350,  312,
      192,  349,  329,  313,  216,  351,  339,  217,  340,  352,
      218,  353,  330,  219,  358,  359,  220,  331,  332,  341,
      192, 1059, 1059,  215,  363,  350, 1059,  192, 1059,  329,
     1059,  216,  351,  339,  217,  340,  352,  218,  353,  330,

      219,  358,  359,  220,  331,  332,  341,  192,  192,  226,
      354,  363,  364,  356,  355,  227,  228,  229,  357,  365,
      366,  360,  230,  367, 1059,  370,  371,  372,  192, 1059,
      361,  373,  376, 1059, 1059,  192,  226,  354,  362,  364,
      356,  355,  227,  228,  229,  357,  365,  366,  360,  230,
      367,  368,  370,  371,  372,  192,  239,  361,  373,  376,
      192,  374,  369,  377,  375,  362,  378,  382,  383,  384,
      240,  380,  379, 1059,  497,  498,  241,  242,  368, 1059,
      192, 1059, 1059,  239,  381,  192,  192,  192,  374,  369,
      377,  375, 1059,  378,  382,  383,  384,  240,  380,  379,

      192,  497,  498,  241,  242,  192,  192,  192,  192,  243,
      499,  381,  192,  192,  500,  388, 1059,  244,  387,  192,
      192,  245, 1059,  192,  246, 1059, 1059,  192,  192, 1059,
      389, 1059,  192,  192, 1059,  192,  243,  499,  390,  192,
     1059,  500,  388,  192,  244,  387,  192,  192,  245,  391,
      192,  246,  392,  192,  192,  192,  252,  389,  253,  501,
      394,  254,  192,  502,  192,  390,  192,  393,  255,  256,
      192, 1059,  192,  192,  192,  503,  391,  429,  192,  392,
      192,  192,  192,  252,  192,  253,  501,  394,  254,  192,
      502,  192,  192, 1059,  393,  255,  256,  192,  395,  192,

      192,  192,  503, 1059,  429,  192,  257,  258,  192,  192,
      259,  192,  396,  260,  261,  397, 1059,  192, 1059,  192,
      262,  398,  399,  263,  192,  395,  504,  400,  192, 1059,
      192,  192, 1059,  257,  258,  192,  192,  259,  507,  396,
      260,  261,  397,  401,  192,  402,  192,  262,  398,  399,
      263,  192, 1059,  504,  400,  192,  192,  192,  192,  403,
      192,  406,  505,  192,  506,  507,  407,  508, 1059,  404,
      401, 1059,  402,  192,  509, 1059,  510,  405,  192,  192,
      192, 1059,  192,  192, 1059, 1059,  403,  192,  406,  505,
     1059,  506, 1059,  407,  508,  412,  404,  192,  415, 1059,

      511,  509,  192,  510,  405, 1059,  192,  192,  408,  192,
      413,  414,  192,  409, 1059,  512,  192,  192, 1059,  410,
     1059,  192,  412, 1059,  192,  415,  411,  511, 1059,  192,
      417,  416,  192, 1059, 1059,  408,  192,  413,  414,  192,
      409,  192,  512,  192,  192,  420,  410,  192,  192,  418,
      419,  192,  513,  411, 1059,  192, 1059,  417,  416,  192,
      192,  192,  426,  192, 1059,  439,  192,  192,  192,  514,
      428,  192,  420,  427,  192,  192,  418,  419,  192,  513,
      192,  192,  192,  192, 1059, 1059,  192,  192,  192,  426,
      431,  192,  439,  192,  192,  446,  514,  428,  192,  421,

      427,  422,  192,  192,  192,  423, 1059,  192,  192,  192,
      192,  192,  424,  192,  430,  192,  425,  431,  192,  432,
      192,  192,  446, 1059,  192,  433,  421, 1059,  422,  192,
      192,  192,  423,  192,  434,  192,  192,  435,  192,  424,
      192,  430,  192,  425,  517,  192,  432,  192,  192,  438,
      192,  192,  433,  192,  436,  192,  192, 1059,  518,  437,
      192,  434,  192,  519,  435,  192,  440,  192,  520,  192,
      447,  517,  192, 1059,  192,  192,  438,  192,  445, 1059,
      192,  436,  192,  455,  515,  518,  437,  192,  448,  192,
      519, 1059,  192,  440,  192,  520,  192,  447,  521,  516,

      192,  192,  192,  441,  192,  445,  449,  192,  450,  192,
      455,  515, 1059,  442,  192,  448,  192,  522,  443,  444,
      192,  192,  454, 1059,  192,  521,  516,  192,  523,  192,
      441,  192,  524,  449,  192,  450,  192,  451,  192,  452,
      442,  192,  192,  192,  522,  443,  444,  192, 1059,  454,
      453,  192,  456,  457,  525,  523,  192,  458,  192,  524,
     1059,  192,  192,  192,  451,  192,  452,  192,  192,  192,
      192,  460,  192,  461,  459,  192,  192,  453, 1059,  456,
      457,  525,  526, 1059,  458,  192,  527,  192,  192,  192,
      192,  192,  192, 1059,  192,  192,  192,  192,  460,  192,

      461,  459,  192,  192,  462,  192,  463, 1059,  528,  526,
      464,  192,  465,  527,  192, 1059,  192,  192,  192,  192,
      192, 1059,  192,  192,  192,  192,  466, 1059, 1059,  468,
      467,  462,  192,  463,  469,  528,  192,  464,  192,  465,
      192, 1059,  192,  192,  192,  471,  192,  192,  192,  472,
      470,  192,  192,  466,  192,  477,  468,  467,  473,  192,
     1059,  469,  192,  192,  475, 1059,  474,  192,  192,  192,
      192,  192,  471,  192,  192,  192,  472,  470,  192,  192,
     1059,  192,  477,  476,  478,  473,  192,  192, 1059,  192,
      192,  475,  192,  474,  529,  192,  192,  192,  192,  479,

      482,  192, 1059,  530,  480,  192,  192,  192,  192,  531,
      476,  478,  192,  483,  192,  481,  192,  192,  192,  192,
      192,  529, 1059,  192,  485,  192,  479,  482,  192,  484,
      530,  480,  192,  494,  192,  192,  531,  192,  192,  192,
      483,  486,  481,  192,  487,  192,  192,  192,  488,  192,
      489,  485,  192,  192,  192,  192,  484,  192,  496,  492,
      494,  490,  192,  192,  192,  192,  192,  491,  486,  192,
      532,  487,  493,  192,  192,  488,  192,  489,  495,  192,
      192,  192,  192,  192,  192,  496,  492,  533,  490,  192,
      192,  534,  535,  192,  491,  536,  192,  532,  537,  493,

      538,  192,  539,  540,  541,  495,  192,  542,  543,  192,
      192,  544,  545,  546,  533,  547,  548,  550,  534,  535,
      551,  552,  536,  553,  554,  537,  549,  538,  555,  539,
      540,  541,  556,  557,  542,  543,  558,  559,  544,  545,
      546,  560,  547,  548,  550,  561,  562,  551,  552,  563,
      553,  554,  564,  549,  565,  555,  566,  567,  568,  556,
      557,  569,  570,  558,  559,  571,  572,  573,  560,  574,
      575,  576,  561,  562,  577,  578,  563,  579,  580,  564,
      581,  565,  582,  566,  567,  568,  583,  584,  569,  570,
      585,  589,  571,  572,  573,  590,  574,  575,  576,  586,

      591,  577,  578,  592,  579,  580,  587,  581,  588,  582,
      593,  594,  595,  583,  584,  596,  598,  585,  589,  597,
      599,  192,  590, 1059,  600,  192,  586,  591, 1059,  601,
      592,  703, 1059,  587,  192,  588,  603,  593,  594,  595,
      192,  192,  596,  598,  192,  192,  597,  599,  192,  192,
      192,  600,  192,  192,  192,  192,  601,  602,  703,  192,
      192,  192, 1059,  603, 1059,  604,  606,  192,  192, 1059,
      192,  192,  192,  192, 1059,  192,  192,  192,  192,  192,
      192,  192,  192, 1059,  602, 1059,  192,  192,  607,  192,
      192,  192,  604,  606, 1059, 1059,  605,  192,  192,  608,

      192,  609,  192,  610,  192,  192,  192,  611,  613,  192,
      192,  192,  192,  192, 1059,  607,  192,  192,  192,  612,
     1059,  192,  192,  605,  192,  192,  608,  614,  609, 1059,
      610,  192,  192,  192,  611,  613,  192,  192,  192,  192,
      192,  615,  192,  192,  622,  192,  612,  618,  192,  192,
     1059,  192,  616,  617,  614, 1059,  620,  192,  192,  192,
      192,  192,  619,  192,  192,  192,  192,  192,  615,  192,
      192,  622,  192,  624,  618, 1059,  192,  192,  192,  616,
      617,  621,  192,  620,  192,  192,  192,  192,  192,  619,
      192,  192,  192,  192,  192,  626,  192,  623,  625,  192,

      624,  192,  192,  192,  192,  192,  628,  192,  621,  192,
      192,  627,  629,  192,  192,  192, 1059, 1059,  630,  192,
      192,  192,  626,  192,  623,  625,  192, 1059,  192,  192,
      192,  192,  192,  628,  192,  192,  192,  192,  627,  629,
      192,  635,  192,  632,  633,  630,  192,  192,  192,  631,
      636,  192,  192,  192,  192,  192,  192,  192,  192,  192,
     1059,  192,  192,  192, 1059, 1059,  634,  192,  635,  704,
      632,  633,  192,  192,  192,  192,  631,  636,  192,  192,
      192,  192,  192,  192,  192, 1059,  639,  192,  192,  192,
      192,  640,  637,  634,  638,  192,  704,  705, 1059,  192,

      192,  192,  192,  192,  192,  643,  641,  192,  192,  192,
      192,  192,  642,  639,  192, 1059,  192,  192,  640,  637,
     1059,  638,  192,  192,  705,  192,  648,  649,  192,  192,
      192,  192,  643,  641,  192,  192,  192,  192,  192,  642,
      644,  192,  645,  650,  646,  192,  192,  192, 1059,  192,
      192,  647,  192,  648,  649,  192,  192, 1059,  192,  192,
     1059,  192, 1059,  192,  192,  192, 1059,  644,  192,  645,
      650,  646,  192,  192,  192,  653,  192,  651,  647,  192,
      192,  192,  706,  656,  192,  192,  192,  652,  192,  654,
      192,  192,  658,  192,  659,  192,  655,  192,  192,  657,

      192,  192,  653,  192,  651, 1059,  192,  192,  192,  706,
      656,  192,  707,  192,  652,  192,  654,  192,  192,  658,
      192,  659,  192,  655,  192,  192,  657,  192,  192,  192,
      192,  660,  192,  662,  661,  192, 1059,  192, 1059,  707,
      192, 1059,  192,  708,  192,  192,  192,  192,  709,  192,
      663,  668,  192, 1059, 1059,  192,  192,  710,  660,  192,
      662,  661,  192,  664,  192,  192,  192,  192,  192,  192,
      708,  192,  665,  192,  192,  709,  192,  663,  668,  192,
      669,  666,  192,  667,  710,  192, 1059,  670,  192,  192,
      664,  192,  192,  192,  192,  192,  192,  192,  192,  665,

      192,  192,  192,  711, 1059,  192,  671,  669,  666,  673,
      667,  192,  192,  672,  670,  192,  192,  192,  192,  674,
      675,  192,  192,  192,  192,  192, 1059,  192,  192,  192,
      711,  192,  192,  671,  676,  677,  673,  679,  192,  192,
      672, 1059,  712,  192,  192, 1059,  674,  675,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
     1059,  676,  677,  678,  679, 1059,  192,  192,  192,  712,
      192,  681,  680,  192,  192,  683,  192,  192,  192, 1059,
      192,  192,  192,  192,  192,  192,  192,  192,  192, 1059,
      678,  192,  682,  687,  192,  192,  684,  192,  681,  680,

      192,  192,  683,  192,  192,  192,  685,  192,  192,  713,
     1059,  192,  192,  192,  192,  192,  686,  688,  192,  682,
      687,  714, 1059,  684,  192, 1059,  689,  192,  192,  192,
      715,  716,  192,  685,  192,  192,  713,  192,  192,  690,
      192,  691,  192,  686,  688,  192,  693,  717,  714,  192,
      192,  192,  692,  689,  192,  192,  192,  715,  716,  718,
      694,  695,  192,  192,  192,  192,  690,  719,  691,  192,
      192,  192,  192,  693,  717, 1059,  192,  192,  192,  692,
      696,  697,  192,  192,  192, 1059,  718,  694,  695,  192,
      192,  720,  192,  192,  719,  721, 1059,  192,  192,  698,

      722,  723,  192,  192,  192,  724,  702,  696,  697,  192,
      192,  192,  699,  192,  192,  725,  700,  701,  720,  726,
      192,  727,  721,  192,  728,  729,  698,  722,  723,  192,
      192,  192,  724,  702,  192,  730,  731,  732,  733,  699,
      192,  192,  725,  700,  701,  734,  726,  735,  727,  736,
      192,  728,  729,  737,  738,  739,  740,  742,  743,  744,
      745,  192,  730,  731,  732,  733,  748,  741,  746,  747,
      749,  750,  734,  751,  735,  752,  736,  753,  754,  755,
      737,  738,  739,  740,  742,  743,  744,  745,  756,  757,
      758,  759,  760,  748,  741,  746,  747,  749,  750,  761,

      751,  762,  752,  763,  753,  754,  755,  764,  765,  766,
      767,  768,  769,  770,  771,  756,  757,  758,  759,  760,
      772,  773,  774,  775,  776,  777,  761, 1059,  762, 1059,
      763, 1059,  853,  192,  764,  765,  766,  767,  768,  769,
      770,  771,  192,  192,  192,  192,  778,  772,  773,  774,
      775,  776,  777,  192,  783,  779,  192,  192,  782,  853,
      192,  784,  192,  780,  781,  192,  192,  192, 1059,  192,
      192,  192,  192,  778,  192,  785,  192,  192, 1059,  192,
      192,  783,  779,  192,  192,  782,  192,  192,  784,  192,
      780,  781,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  785,  192,  192,  786,  192, 1059,  787,  854,
      855,  788,  789,  192,  192,  192,  192,  192,  192, 1059,
      192,  192,  192,  192,  192,  192,  192,  192,  790,  793,
      192,  192,  786,  192,  192,  787,  854,  855,  788,  789,
     1059,  192,  192,  192,  192,  192,  791,  192,  192,  792,
      192,  192,  192,  192,  192,  790,  793,  192,  192, 1059,
      192,  192,  794,  192,  192,  192,  192,  795,  192, 1059,
      856,  857,  192,  791, 1059,  192,  792,  192,  192,  192,
      192,  192,  796,  192,  192,  192,  192,  797,  192,  794,
      192,  192,  192,  192,  795,  192,  192,  856,  857,  192,

      858,  802,  192, 1059,  192,  192,  192,  798,  192,  796,
      192,  192,  192,  192,  797,  192,  192,  799, 1059,  804,
      800,  192,  192,  192,  192,  192,  192,  858,  802,  192,
      192,  192,  192,  192,  798,  192,  801, 1059,  803,  192,
      192,  192,  192,  192,  799,  805,  804,  800,  192,  192,
      192,  192,  192,  192,  192,  806,  192,  192,  192,  192,
      192, 1059,  192,  801,  192,  803,  192,  192,  192,  192,
      192, 1059,  805,  192,  192,  807,  192,  192,  192,  192,
     1059,  192,  806,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  808,  192,  810, 1059,  192,  192,  809, 1059,

      192,  192,  807,  192, 1059,  192,  192,  192,  192,  811,
      192,  192,  859,  192,  192,  192,  192,  192,  192,  808,
      192,  810,  192,  192,  192,  809,  812,  192,  860,  817,
      192,  813, 1059,  192,  192,  192,  811,  814,  192,  859,
      192,  192,  192,  192,  192,  192,  192,  192,  815,  192,
      192,  192,  192,  812,  192,  860,  817, 1059,  813,  816,
      192,  192,  192,  192,  814,  192,  192,  192,  861,  192,
      192,  192,  192,  192,  192,  815,  818,  192,  192,  192,
      820,  192,  192,  192,  192,  819,  816,  823,  192,  192,
      192, 1059, 1059,  192,  192,  861,  862,  192,  192,  192,

      192,  192,  192,  818,  192,  192,  192,  820,  192,  192,
      192,  192,  819, 1059,  823,  821,  822,  826,  825,  824,
      192,  192,  192,  862, 1059,  192,  192,  192,  192,  192,
      192,  192, 1059,  192,  863, 1059, 1059,  192,  192,  192,
      192, 1059,  821,  822,  826,  825,  824,  192,  192,  192,
      192,  827,  828,  192,  192,  192,  830,  192,  192,  192,
      192,  863,  829,  832,  192,  192,  192,  192,  831, 1059,
     1059,  192,  192,  192,  192,  192, 1059,  192,  827,  828,
      192,  192,  192,  830,  833,  192,  192,  192,  834,  829,
      832,  192,  192,  192,  192,  831,  192,  192,  192,  192,

      192,  192,  192,  836,  835,  838,  837,  192,  192,  192,
     1059,  833, 1059,  839,  192,  834,  192,  192,  192,  192,
      192,  192,  840,  192,  192,  192,  192,  192,  192,  192,
      836,  835,  838,  837, 1059,  192,  192,  841,  192,  192,
      839,  192,  192,  192,  192,  864,  192,  192,  192,  840,
     1059,  192,  192,  192,  192,  192,  192,  865,  192,  192,
      844,  843,  842,  192,  841,  192,  192, 1059,  192,  192,
     1059,  192,  864,  192,  192,  192,  192,  846,  192,  192,
      192,  192,  848,  192,  865,  192,  192,  844,  843,  842,
      192,  849,  845,  192,  847,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  846,  850,  192,  192,  192,  848,
      192,  192,  866,  192,  192,  852,  192,  192,  849,  845,
      192,  847,  192,  192,  192,  192,  192,  192,  192,  192,
      851,  867,  850,  868,  192,  192,  192,  869,  192,  866,
      192,  192,  852,  192,  192,  192,  870,  871,  872,  192,
      873,  874,  192,  875,  876,  877,  878,  851,  867,  879,
      868,  192,  192,  192,  869,  880,  881,  882,  883,  884,
      885,  886,  192,  870,  871,  872,  887,  873,  874,  888,
      875,  876,  877,  878,  889,  890,  879,  891,  892,  893,
      894,  895,  880,  881,  882,  883,  884,  885,  886,  896,

      897,  898,  899,  887,  900,  901,  888,  902,  903,  904,
      905,  889,  890,  192,  891,  892,  893,  894,  895,  192,
     1059,  192,  959,  192,  907,  908,  896,  897,  898,  899,
     1059,  900,  901,  192,  902,  903,  904,  905,  192,  192,
      192,  192,  906,  192,  192,  192,  192,  909,  192,  959,
      192,  907,  908,  192,  910,  192,  913,  192,  192,  192,
      192, 1059,  911, 1059, 1059,  192,  192,  912,  192,  906,
      192,  192,  192,  192,  909,  192,  192,  192,  192,  192,
      192,  910,  192,  913,  192,  192,  192,  916,  914,  911,
      192,  192,  192,  192,  912, 1059,  919,  915,  192, 1059,

      192,  918,  192,  192,  192,  192,  192,  192,  917,  921,
      192,  192,  192,  192,  916,  914,  192,  192,  192,  192,
      192, 1059,  192,  919,  915,  192,  920,  192,  918,  192,
      192,  192, 1059, 1059,  192,  917,  921,  192,  192,  192,
      192,  924,  192,  192,  192,  922,  923,  192,  925,  192,
      192,  192, 1059,  920,  192, 1059,  192,  192,  192,  926,
      192,  192,  192,  192,  192,  192, 1059, 1059,  924,  192,
      927,  192,  922,  923,  192,  925,  192,  192,  192,  192,
      192,  192,  192,  192, 1059,  192,  926,  192,  192,  192,
      192,  192,  192,  192,  930,  928,  192,  927,  192,  192,

      960, 1059, 1059,  192,  192, 1059,  192,  192,  192,  192,
      192,  929,  192,  192,  192,  192,  932,  192,  192,  192,
      192,  930,  928,  192,  192,  192,  192,  960,  192,  192,
      931,  192,  192,  933,  192,  192,  192,  192,  929,  192,
      192,  192,  192,  932,  192,  192,  192,  192,  192,  192,
      935,  192,  192,  192,  934,  192,  192,  931,  192,  192,
      933,  192,  192,  192,  192,  936,  192,  192,  192,  192,
      192,  937, 1059,  192,  192,  192,  192,  935,  192,  192,
      192,  934,  192,  939,  192,  192, 1059, 1059,  192,  192,
      961, 1059,  936,  192,  192,  192,  192,  192,  937,  938,

      192,  192,  192,  192,  192,  192,  940,  942, 1059,  192,
      939,  192,  192,  192,  941,  192,  192,  961,  192,  944,
      192,  192,  943,  192, 1059, 1059,  938,  192,  192,  192,
      192,  192,  192,  940,  942,  945,  192,  192,  192,  192,
      192,  941,  962,  192, 1059,  192,  944,  948,  192,  943,
      192,  192,  946,  192,  192,  192,  192,  192, 1059,  192,
      947,  192,  945,  192,  192,  192,  192,  949,  950,  962,
      192,  192,  953,  192,  948,  192,  192, 1059,  192,  946,
      192,  192,  192,  192,  192,  952,  192,  947,  192,  192,
      955,  951,  192,  192,  949,  950,  192, 1059,  192,  953,

      192,  192,  192,  192,  954,  192,  192, 1059,  192,  192,
      192,  957,  952,  192,  963,  192,  192,  955,  951,  192,
      956,  192,  964,  192,  192,  192,  192, 1059,  192,  965,
      958,  954,  192,  192,  192,  192,  192,  192,  957,  966,
      967,  963,  192,  968,  192,  969,  970,  956,  192,  964,
      971,  192,  192,  192,  192,  972,  965,  958,  973,  974,
      975,  192,  192,  976,  977,  978,  966,  967,  979,  980,
      968,  192,  969,  970,  981,  982,  983,  971,  984,  985,
      986,  192,  972,  987,  988,  973,  974,  975,  192,  192,
      976,  977,  978,  990,  991,  979,  980,  192,  989,  192,

     1059,  981,  982,  983,  192,  984,  985,  986,  192,  192,
      987,  988,  192,  992,  192,  192,  192,  192,  192,  192,
      990,  991,  192, 1059,  192,  989,  192,  192,  994,  993,
      192,  192,  192,  995, 1059,  192,  192, 1059,  192,  192,
      992,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  996,  192,  192,  192,  994,  993,  192, 1059,  192,
      995,  997,  192,  192,  192,  192,  998,  192,  192,  192,
      192, 1059,  192,  192,  192,  192,  192,  192,  996,  192,
      192, 1017,  192, 1059,  192,  999,  192,  192,  997,  192,
      192,  192, 1059,  998,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192, 1059, 1059,  192,  192, 1017,  192,
     1003,  192,  999,  192,  192,  192, 1000,  192,  192,  192,
      192,  192, 1001,  192,  192,  192,  192,  192,  192,  192,
      192,  192, 1002,  192,  192,  192, 1018, 1003, 1004,  192,
      192,  192,  192, 1000,  192,  192,  192,  192,  192, 1001,
     1019,  192, 1005,  192,  192,  192,  192,  192,  192, 1002,
     1007,  192,  192, 1018,  192, 1004,  192,  192,  192,  192,
     1006, 1009,  192,  192,  192,  192,  192, 1019,  192, 1005,
      192, 1059,  192,  192, 1008,  192, 1010, 1007,  192,  192,
      192,  192,  192,  192,  192, 1059,  192, 1006, 1009,  192,

      192,  192,  192,  192,  192,  192, 1020,  192,  192,  192,
      192, 1008,  192, 1010, 1012, 1011,  192,  192,  192,  192,
      192,  192, 1013,  192,  192, 1021,  192, 1059,  192,  192,
     1022,  192,  192, 1020, 1059,  192,  192,  192,  192,  192,
      192, 1012, 1011,  192,  192,  192,  192, 1023,  192, 1013,
      192,  192, 1021,  192, 1014,  192,  192, 1022, 1024,  192,
      192, 1015,  192, 1025,  192,  192,  192,  192,  192, 1016,
      192,  192, 1026,  192, 1023,  192, 1027,  192,  192, 1059,
     1039, 1014,  192, 1059, 1059, 1024,  192,  192, 1015,  192,
     1025,  192,  192,  192,  192,  192, 1016,  192,  192, 1026,

     1028, 1059,  192, 1027,  192,  192, 1029, 1039,  192,  192,
      192,  192,  192,  192,  192, 1059,  192, 1059, 1031,  192,
      192,  192,  192, 1059,  192,  192, 1030, 1028,  192,  192,
      192,  192,  192, 1029,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192, 1031,  192,  192, 1032,  192,
      192, 1059,  192, 1030,  192,  192, 1034,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192, 1059,  192,  192, 1032,  192,  192, 1033,  192,
      192,  192,  192, 1034,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192, 1038,  192, 1037, 1035,

      192,  192,  192,  192,  192, 1033,  192,  192, 1040,  192,
      192,  192,  192,  192, 1036,  192,  192,  192,  192, 1041,
      192,  192, 1042, 1038, 1043, 1037, 1035,  192,  192,  192,
     1044,  192,  192,  192,  192, 1040, 1045,  192,  192, 1059,
      192, 1036,  192,  192,  192,  192, 1041,  192,  192, 1042,
     1051, 1043,  192,  192,  192, 1046, 1059, 1044,  192,  192,
      192,  192,  192, 1045,  192,  192,  192,  192, 1047,  192,
      192,  192, 1059,  192,  192, 1052, 1053, 1051,  192,  192,
      192,  192, 1046, 1048, 1055,  192, 1049,  192,  192,  192,
      192,  192,  192,  192,  192, 1047,  192,  192, 1057, 1050,

      192,  192, 1052, 1053,  192,  192, 1059, 1054,  192,  192,
     1048, 1055,  192, 1049, 1059,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192, 1057, 1050, 1059,  192,  192,
      192,  192, 1056, 1059, 1054,  192,  192, 1059,  192,  192,
      192, 1059, 1058,  192,  192,  192, 1059,  192,  192,  192,
      192,  192, 1059, 1059, 1059,  192,  192,  192, 1059, 1056,
     1059, 1059, 1059, 1059, 1059,  192, 1059,  192, 1059, 1058,
     1059,  192, 1059, 1059, 1059,  192, 1059,  192,   46,   46,
       46,   46,   46,   88, 1059, 1059,   88,   88,  178,  178,
      178, 1059,  178,  180, 1059,  180,  180,  180,  183, 1059,

      183,  183,  183,  192, 1059,  192,  192,  192,    7, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059
    } ;

static const flex_int16_t yy_chk[4277] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1062,
       15,   17,   17,   18,   18,   21,   22,   21,   24,  386,
       23,   30,   24,   21,  274,   21,   24,   23,   31,   21,
       21,   44,   24,   98,   23,   24,   22,   23,   23,   25,
      187,   25,   21,   22,   21,   24,   25,   23,   30,   24,
       21,   25,   21,   24,   23,   31,   21,   21,   44,   24,
       98,   23,   24,   22,   23,   23,   25,   28,   25,  186,

       27,   49,   49,   25,   42,   28,   27,  183,   25,   26,
       99,   28,   42,   50,   50,   57,   57,   26,   32,   55,
       26,   55,   32,   26,   28,  102,   26,   27,   32,   26,
       33,   42,   28,   27,   33,   29,   26,   99,   28,   42,
       33,   29,   29,   29,   26,   32,   92,   26,   29,   32,
       26,   34,  102,   26,   91,   32,   26,   33,   58,   58,
       38,   33,   29,   36,   38,   34,   88,   33,   29,   29,
       29,   34,   34,   35,   36,   29,   85,   41,   34,   41,
       36,   35,   41,   71,   39,   35,   39,   38,   35,   39,
       36,   38,   34,   43,   43,   60,   39,   39,   34,   34,

       35,   36,   59,   71,   41,   56,   41,   36,   35,   41,
       71,   39,   35,   39,   68,   35,   39,   70,   68,   52,
       43,   43,   68,   39,   39,   40,   40,   70,   68,   40,
       71,  103,   40,   40,   86,   86,  107,   70,   68,   40,
      110,   68,   40,   51,   70,   68,   90,   90,   47,   68,
      181,  181,   40,   40,   70,   68,   40,   45,  103,   40,
       40,  185,  185,  107,   70,   68,   40,  110,   20,   40,
       61,   61,   67,   61,   61,   61,   61,   61,   61,   67,
       61,   61,   61,   72,   77,   67,   61,   72,   61,  100,
      111,  114,   67,   72,   61,  111,   61,  100,   19,   67,

       61,   61,  115,   72,   77,   84,   67,  116,  118,   16,
       72,   77,   67,   61,   72,   61,  100,  111,  114,   67,
       72,   61,  111,   61,  100,   84,  120,   61,   61,  115,
       72,   77,   84,  121,  116,  118,   61,   62,   62,   11,
       62,   62,   62,   62,   62,   62,   73,   62,   62,   62,
       73,   76,   84,  120,   62,   76,   73,  122,  101,   78,
      121,  101,   76,   78,  117,  117,   73,   83,   76,    7,
       83,   83,    4,   73,   62,   76,    3,   73,   76,   78,
        0,   62,   76,   73,  122,  101,   78,   83,  101,   76,
       78,  117,  117,   73,   83,   76,   81,   83,   83,  104,

      123,   62,   76,   62,   63,   81,   78,   81,   63,  109,
       81,   63,  124,  104,   83,  108,   81,  108,   63,  109,
      125,   63,   63,   81,  126,  127,  104,  123,   63,    0,
        0,   63,   81,    0,   81,   63,  109,   81,   63,  124,
      104,    0,  108,   81,  108,   63,  109,  125,   63,   63,
       82,  126,  127,    0,   82,   63,   64,  112,   82,  106,
       64,  130,  112,  113,   64,  106,  106,  132,  112,  128,
       64,  129,  128,   64,   82,  112,  129,   82,  113,  113,
       64,   82,  133,   64,  112,   82,  106,   64,  130,  112,
      113,   64,  106,  106,  132,  112,  128,   64,  129,  128,

       64,   82,  112,  129,  135,  113,  113,   64,   65,  133,
      136,  137,  138,  141,  139,   65,  139,   65,  142,  119,
      143,  119,   65,  144,  145,  119,  146,   65,   65,    0,
      147,  135,  119,    0,  148,   65,  119,  136,  137,  138,
      141,  139,   65,  139,   65,  142,  119,  143,  119,   65,
      144,  145,  119,  146,   65,   65,   66,  147,  150,  119,
       66,  148,  134,  119,   66,  151,  140,   66,  140,  152,
       66,  153,  134,   66,  156,  157,   66,  134,  134,  140,
       66,    0,    0,   66,  159,  150,    0,   66,    0,  134,
        0,   66,  151,  140,   66,  140,  152,   66,  153,  134,

       66,  156,  157,   66,  134,  134,  140,   66,   69,   69,
      154,  159,  160,  155,  154,   69,   69,   69,  155,  161,
      162,  158,   69,  163,    0,  165,  166,  167,   69,    0,
      158,  168,  170,    0,    0,   69,   69,  154,  158,  160,
      155,  154,   69,   69,   69,  155,  161,  162,  158,   69,
      163,  164,  165,  166,  167,   69,   74,  158,  168,  170,
       74,  169,  164,  171,  169,  158,  172,  174,  175,  176,
       74,  173,  172,    0,  276,  278,   74,   74,  164,    0,
       74,    0,    0,   74,  173,  192,  200,   74,  169,  164,
      171,  169,    0,  172,  174,  175,  176,   74,  173,  172,

      194,  276,  278,   74,   74,  192,  200,   74,   75,   75,
      279,  173,  192,  200,  281,  194,    0,   75,  193,  193,
      194,   75,    0,  195,   75,    0,    0,  194,   75,    0,
      195,    0,  192,  200,    0,   75,   75,  279,  195,  193,
        0,  281,  194,  195,   75,  193,  193,  194,   75,  196,
      195,   75,  196,  196,  197,   75,   79,  195,   79,  283,
      198,   79,  198,  284,  218,  195,  193,  197,   79,   79,
      195,    0,  226,  196,  197,  285,  196,  218,   79,  196,
      196,  197,  198,   79,  218,   79,  283,  198,   79,  198,
      284,  218,  226,    0,  197,   79,   79,  199,  199,  226,

      196,  197,  285,    0,  218,   79,   80,   80,  201,  198,
       80,  218,  199,   80,   80,  201,    0,  199,    0,  226,
       80,  201,  201,   80,  199,  199,  286,  202,  201,    0,
       80,  202,    0,   80,   80,  201,  203,   80,  288,  199,
       80,   80,  201,  203,  199,  203,  206,   80,  201,  201,
       80,  202,    0,  286,  202,  201,  203,   80,  202,  204,
      205,  206,  287,  203,  287,  288,  206,  289,    0,  204,
      203,    0,  203,  206,  290,    0,  291,  205,  202,  204,
      205,    0,  209,  203,    0,    0,  204,  205,  206,  287,
        0,  287,    0,  206,  289,  208,  204,  208,  209,    0,

      292,  290,  209,  291,  205,    0,  204,  205,  207,  209,
      208,  208,  207,  207,    0,  294,  211,  208,    0,  207,
        0,  210,  208,    0,  208,  209,  207,  292,    0,  209,
      211,  210,  207,    0,    0,  207,  211,  208,  208,  207,
      207,  210,  294,  211,  208,  213,  207,  213,  210,  212,
      212,  212,  296,  207,    0,  215,    0,  211,  210,  207,
      217,  227,  215,  211,    0,  227,  216,  213,  210,  297,
      217,  212,  213,  216,  213,  215,  212,  212,  212,  296,
      217,  227,  215,  220,    0,    0,  216,  217,  227,  215,
      220,  231,  227,  216,  213,  231,  297,  217,  212,  214,

      216,  214,  215,  220,  219,  214,    0,  217,  227,  221,
      220,  231,  214,  216,  219,  222,  214,  220,  231,  221,
      223,  214,  231,    0,  219,  222,  214,    0,  214,  221,
      220,  219,  214,  225,  223,  222,  221,  223,  231,  214,
      223,  219,  222,  214,  299,  224,  221,  223,  214,  225,
      232,  219,  222,  225,  224,  228,  221,    0,  300,  224,
      225,  223,  222,  301,  223,  224,  228,  223,  302,  230,
      232,  299,  224,    0,  237,  228,  225,  232,  230,    0,
      225,  224,  228,  237,  298,  300,  224,  233,  233,  230,
      301,    0,  224,  228,  237,  302,  230,  232,  303,  298,

      234,  237,  228,  229,  229,  230,  234,  233,  234,  236,
      237,  298,    0,  229,  233,  233,  230,  304,  229,  229,
      234,  237,  236,    0,  229,  303,  298,  234,  305,  236,
      229,  229,  306,  234,  233,  234,  236,  235,  239,  235,
      229,  235,  240,  238,  304,  229,  229,  234,    0,  236,
      235,  229,  238,  239,  308,  305,  236,  240,  239,  306,
        0,  235,  240,  238,  235,  239,  235,  241,  235,  240,
      238,  242,  243,  243,  241,  242,  244,  235,    0,  238,
      239,  308,  309,    0,  240,  239,  310,  241,  235,  240,
      238,  246,  243,    0,  241,  242,  244,  247,  242,  243,

      243,  241,  242,  244,  245,  245,  246,    0,  311,  309,
      247,  246,  248,  310,  241,    0,  248,  247,  246,  243,
      250,    0,  242,  244,  247,  245,  249,    0,    0,  250,
      249,  245,  245,  246,  250,  311,  248,  247,  246,  248,
      250,    0,  252,  248,  247,  252,  249,  250,  251,  253,
      251,  253,  245,  249,  254,  256,  250,  249,  253,  256,
        0,  250,  252,  248,  254,    0,  253,  250,  251,  252,
      255,  253,  252,  249,  254,  251,  253,  251,  253,  256,
        0,  254,  256,  255,  257,  253,  256,  257,    0,  252,
      255,  254,  258,  253,  312,  251,  259,  255,  253,  258,

      260,  254,    0,  313,  259,  261,  256,  257,  263,  314,
      255,  257,  258,  261,  257,  259,  259,  255,  262,  258,
      260,  312,    0,  259,  263,  261,  258,  260,  263,  262,
      313,  259,  261,  269,  257,  263,  314,  264,  262,  258,
      261,  264,  259,  259,  264,  262,  266,  260,  265,  265,
      266,  263,  261,  269,  267,  263,  262,  264,  271,  268,
      269,  267,  271,  270,  264,  262,  266,  267,  264,  265,
      315,  264,  268,  266,  267,  265,  265,  266,  270,  268,
      269,  267,  271,  270,  264,  271,  268,  316,  267,  271,
      270,  318,  319,  266,  267,  320,  265,  315,  321,  268,

      322,  267,  323,  324,  325,  270,  268,  326,  327,  271,
      270,  328,  329,  330,  316,  331,  332,  333,  318,  319,
      334,  336,  320,  337,  338,  321,  332,  322,  339,  323,
      324,  325,  340,  341,  326,  327,  342,  343,  328,  329,
      330,  344,  331,  332,  333,  345,  347,  334,  336,  348,
      337,  338,  349,  332,  350,  339,  351,  352,  353,  340,
      341,  354,  355,  342,  343,  356,  357,  358,  344,  359,
      360,  361,  345,  347,  363,  364,  348,  365,  366,  349,
      368,  350,  369,  351,  352,  353,  370,  371,  354,  355,
      373,  375,  356,  357,  358,  376,  359,  360,  361,  373,

      377,  363,  364,  378,  365,  366,  374,  368,  374,  369,
      379,  380,  381,  370,  371,  382,  383,  373,  375,  382,
      384,  387,  376,    0,  388,  389,  373,  377,    0,  390,
      378,  497,    0,  374,  392,  374,  393,  379,  380,  381,
      393,  387,  382,  383,  388,  389,  382,  384,  387,  390,
      391,  388,  389,  394,  392,  395,  390,  391,  497,  397,
      393,  392,    0,  393,    0,  395,  397,  393,  387,    0,
      391,  388,  389,  394,    0,  395,  390,  391,  396,  397,
      394,  392,  395,    0,  391,    0,  397,  393,  398,  398,
      400,  401,  395,  397,    0,    0,  396,  391,  396,  399,

      394,  399,  395,  400,  402,  396,  397,  401,  403,  398,
      400,  401,  403,  404,    0,  398,  398,  400,  401,  402,
        0,  399,  405,  396,  402,  396,  399,  404,  399,    0,
      400,  402,  403,  404,  401,  403,  398,  400,  401,  403,
      404,  406,  405,  407,  413,  408,  402,  410,  399,  405,
        0,  402,  408,  409,  404,    0,  411,  409,  411,  403,
      404,  406,  410,  407,  413,  408,  412,  410,  406,  405,
      407,  413,  408,  415,  410,    0,  415,  409,  411,  408,
      409,  412,  414,  411,  409,  411,  412,  416,  406,  410,
      407,  413,  408,  412,  410,  417,  415,  414,  416,  419,

      415,  418,  414,  415,  409,  411,  420,  416,  412,  414,
      420,  418,  421,  412,  416,  417,    0,    0,  422,  419,
      422,  418,  417,  415,  414,  416,  419,    0,  418,  414,
      420,  425,  421,  420,  416,  423,  424,  420,  418,  421,
      422,  427,  417,  424,  425,  422,  419,  422,  418,  423,
      428,  425,  426,  429,  428,  423,  424,  420,  425,  421,
        0,  427,  423,  424,    0,    0,  426,  422,  427,  498,
      424,  425,  426,  429,  428,  433,  423,  428,  425,  426,
      429,  428,  423,  424,  430,    0,  432,  431,  427,  432,
      436,  433,  430,  426,  431,  433,  498,  499,    0,  426,

      429,  428,  433,  434,  430,  436,  434,  431,  435,  432,
      436,  430,  435,  432,  431,    0,  432,  436,  433,  430,
        0,  431,  433,  434,  499,  437,  441,  442,  435,  438,
      434,  430,  436,  434,  431,  435,  432,  436,  439,  435,
      437,  440,  438,  443,  439,  437,  441,  442,    0,  438,
      434,  440,  437,  441,  442,  435,  438,    0,  439,  445,
        0,  440,    0,  443,  447,  439,    0,  437,  440,  438,
      443,  439,  437,  441,  442,  445,  438,  444,  440,  445,
      446,  448,  500,  449,  447,  439,  445,  444,  440,  446,
      443,  447,  451,  451,  452,  450,  448,  444,  452,  450,

      446,  448,  445,  449,  444,    0,  445,  446,  448,  500,
      449,  447,  501,  451,  444,  450,  446,  455,  452,  451,
      451,  452,  450,  448,  444,  452,  450,  446,  448,  453,
      449,  453,  454,  455,  454,  456,    0,  455,    0,  501,
      451,    0,  450,  502,  455,  452,  458,  457,  504,  453,
      456,  462,  454,    0,    0,  456,  453,  505,  453,  454,
      455,  454,  456,  457,  455,  459,  458,  457,  460,  461,
      502,  462,  459,  458,  457,  504,  453,  456,  462,  454,
      463,  460,  456,  461,  505,  459,    0,  464,  460,  461,
      457,  464,  459,  458,  457,  460,  461,  465,  462,  459,

      463,  467,  466,  508,    0,  469,  465,  463,  460,  467,
      461,  464,  459,  466,  464,  460,  461,  465,  464,  468,
      469,  467,  466,  468,  465,  469,    0,  463,  467,  466,
      508,  470,  469,  465,  470,  471,  467,  473,  464,  474,
      466,    0,  509,  468,  465,    0,  468,  469,  467,  466,
      468,  470,  469,  472,  475,  471,  476,  473,  470,  474,
        0,  470,  471,  472,  473,    0,  474,  479,  478,  509,
      468,  476,  475,  472,  475,  478,  476,  477,  470,    0,
      472,  475,  471,  476,  473,  480,  474,  479,  478,    0,
      472,  481,  477,  483,  479,  478,  480,  477,  476,  475,

      472,  475,  478,  476,  477,  480,  481,  482,  484,  510,
        0,  481,  480,  483,  479,  478,  482,  485,  481,  477,
      483,  511,    0,  480,  477,    0,  485,  482,  484,  486,
      513,  514,  480,  481,  482,  484,  510,  485,  481,  486,
      483,  486,  487,  482,  485,  490,  488,  515,  511,  486,
      488,  489,  487,  485,  482,  484,  486,  513,  514,  516,
      489,  490,  487,  492,  485,  490,  486,  519,  486,  487,
      488,  489,  490,  488,  515,    0,  486,  488,  489,  487,
      491,  492,  491,  492,  493,    0,  516,  489,  490,  487,
      492,  520,  490,  496,  519,  521,    0,  488,  489,  493,

      524,  525,  491,  494,  493,  526,  496,  491,  492,  491,
      492,  493,  494,  496,  495,  527,  494,  495,  520,  528,
      496,  529,  521,  494,  530,  531,  493,  524,  525,  491,
      494,  493,  526,  496,  495,  533,  536,  537,  539,  494,
      496,  495,  527,  494,  495,  541,  528,  543,  529,  544,
      494,  530,  531,  545,  546,  547,  548,  550,  554,  556,
      558,  495,  533,  536,  537,  539,  560,  548,  559,  559,
      561,  563,  541,  564,  543,  565,  544,  566,  567,  569,
      545,  546,  547,  548,  550,  554,  556,  558,  570,  571,
      572,  573,  574,  560,  548,  559,  559,  561,  563,  575,

      564,  576,  565,  578,  566,  567,  569,  579,  580,  581,
      584,  586,  587,  588,  589,  570,  571,  572,  573,  574,
      590,  591,  592,  593,  595,  597,  575,    0,  576,    0,
      578,    0,  705,  600,  579,  580,  581,  584,  586,  587,
      588,  589,  601,  602,  603,  604,  600,  590,  591,  592,
      593,  595,  597,  600,  605,  601,  606,  607,  604,  705,
      600,  607,  601,  602,  603,  604,  609,  610,    0,  601,
      602,  603,  604,  600,  605,  608,  606,  607,    0,  608,
      600,  605,  601,  606,  607,  604,  609,  610,  607,  601,
      602,  603,  604,  609,  610,  612,  613,  611,  614,  608,

      615,  605,  608,  606,  607,  611,  608,    0,  612,  707,
      708,  613,  614,  609,  610,  612,  613,  611,  614,    0,
      615,  616,  612,  613,  611,  614,  608,  615,  616,  619,
      617,  620,  611,  619,  618,  612,  707,  708,  613,  614,
        0,  616,  612,  613,  611,  614,  617,  615,  616,  618,
      617,  620,  621,  619,  618,  616,  619,  617,  620,    0,
      619,  618,  622,  623,  622,  625,  626,  623,  616,    0,
      709,  710,  621,  617,    0,  624,  618,  617,  620,  621,
      619,  618,  624,  623,  622,  625,  626,  627,  627,  622,
      623,  622,  625,  626,  623,  624,  628,  709,  710,  621,

      711,  632,  624,    0,  630,  632,  629,  628,  627,  624,
      623,  622,  625,  626,  627,  627,  628,  629,    0,  634,
      630,  631,  624,  628,  630,  632,  629,  711,  632,  635,
      636,  630,  632,  629,  628,  627,  631,    0,  633,  634,
      637,  631,  633,  628,  629,  636,  634,  630,  631,  635,
      636,  630,  632,  629,  638,  639,  635,  636,  641,  639,
      637,    0,  633,  631,  640,  633,  634,  637,  631,  633,
      643,    0,  636,  645,  638,  640,  635,  636,  641,  639,
        0,  638,  639,  642,  640,  641,  639,  637,  644,  633,
      643,  640,  642,  645,  646,    0,  647,  643,  644,    0,

      645,  638,  640,  642,    0,  641,  639,  648,  644,  647,
      642,  640,  712,  652,  646,  644,  647,  643,  649,  642,
      645,  646,  653,  647,  650,  644,  648,  648,  713,  653,
      642,  649,    0,  652,  648,  644,  647,  650,  649,  712,
      652,  646,  653,  647,  650,  649,  651,  654,  651,  653,
      655,  650,  656,  648,  648,  713,  653,    0,  649,  651,
      652,  657,  658,  660,  650,  649,  651,  654,  715,  653,
      655,  650,  656,  651,  654,  651,  657,  655,  659,  656,
      661,  657,  658,  660,  663,  659,  651,  663,  657,  658,
      660,    0,    0,  651,  654,  715,  716,  655,  659,  656,

      661,  662,  665,  657,  663,  659,  664,  661,  657,  658,
      660,  663,  659,    0,  663,  662,  662,  667,  666,  664,
      666,  662,  665,  716,    0,  659,  664,  661,  662,  665,
      671,  663,    0,  664,  717,    0,    0,  667,  668,  669,
      666,    0,  662,  662,  667,  666,  664,  666,  662,  665,
      671,  668,  669,  664,  670,  674,  672,  671,  668,  669,
      672,  717,  670,  674,  667,  668,  669,  666,  673,    0,
        0,  675,  673,  676,  670,  674,    0,  671,  668,  669,
      672,  670,  674,  672,  675,  668,  669,  672,  676,  670,
      674,  675,  673,  676,  678,  673,  677,  680,  675,  673,

      676,  670,  674,  678,  677,  681,  679,  672,  679,  682,
        0,  675,    0,  682,  678,  676,  677,  680,  675,  673,
      676,  678,  683,  677,  680,  681,  685,  684,  679,  682,
      678,  677,  681,  679,    0,  679,  682,  684,  686,  688,
      682,  678,  683,  677,  680,  719,  685,  684,  687,  683,
        0,  690,  681,  685,  684,  679,  682,  720,  686,  688,
      690,  689,  687,  689,  684,  686,  688,    0,  687,  683,
        0,  690,  719,  685,  684,  687,  691,  692,  690,  693,
      694,  692,  694,  689,  720,  686,  688,  690,  689,  687,
      689,  695,  691,  697,  693,  687,  691,  699,  690,  693,

      694,  692,  696,  691,  692,  696,  693,  694,  692,  694,
      689,  695,  721,  697,  698,  700,  701,  699,  695,  691,
      697,  693,  696,  691,  699,  702,  693,  694,  692,  696,
      698,  722,  696,  723,  698,  700,  701,  724,  695,  721,
      697,  698,  700,  701,  699,  702,  725,  726,  727,  696,
      728,  731,  702,  733,  734,  736,  739,  698,  722,  740,
      723,  698,  700,  701,  724,  741,  742,  747,  749,  750,
      751,  754,  702,  725,  726,  727,  755,  728,  731,  756,
      733,  734,  736,  739,  757,  758,  740,  760,  761,  762,
      763,  764,  741,  742,  747,  749,  750,  751,  754,  765,

      766,  767,  768,  755,  770,  771,  756,  772,  774,  775,
      776,  757,  758,  778,  760,  761,  762,  763,  764,  779,
        0,  780,  853,  781,  782,  783,  765,  766,  767,  768,
        0,  770,  771,  778,  772,  774,  775,  776,  784,  779,
      778,  780,  780,  781,  782,  783,  779,  784,  780,  853,
      781,  782,  783,  786,  785,  785,  788,  787,  784,  789,
      778,    0,  786,    0,    0,  784,  779,  787,  780,  780,
      781,  782,  783,  786,  784,  785,  788,  787,  790,  789,
      786,  785,  785,  788,  787,  784,  789,  792,  790,  786,
      791,  793,  795,  794,  787,    0,  796,  791,  790,    0,

      786,  795,  785,  788,  787,  790,  789,  792,  794,  798,
      791,  793,  795,  794,  792,  790,  796,  791,  793,  795,
      794,    0,  797,  796,  791,  790,  797,  801,  795,  798,
      799,  800,    0,    0,  792,  794,  798,  791,  793,  795,
      794,  801,  797,  796,  802,  799,  800,  801,  802,  797,
      799,  800,    0,  797,  801,    0,  798,  799,  800,  803,
      804,  803,  805,  806,  802,  807,    0,    0,  801,  797,
      806,  802,  799,  800,  801,  802,  810,  799,  800,  811,
      804,  803,  805,  806,    0,  807,  803,  804,  803,  805,
      806,  802,  807,  808,  811,  808,  810,  806,  809,  811,

      855,    0,    0,  810,  812,    0,  811,  804,  803,  805,
      806,  809,  807,  808,  813,  814,  815,  818,  809,  816,
      808,  811,  808,  810,  812,  809,  811,  855,  819,  820,
      814,  812,  821,  816,  813,  814,  815,  818,  809,  816,
      808,  813,  814,  815,  818,  809,  816,  817,  819,  820,
      822,  812,  821,  823,  817,  819,  820,  814,  827,  821,
      816,  813,  814,  815,  818,  824,  816,  817,  825,  824,
      822,  825,    0,  823,  817,  819,  820,  822,  827,  821,
      823,  817,  828,  829,  826,  827,    0,    0,  825,  824,
      856,    0,  824,  830,  817,  825,  824,  822,  825,  826,

      823,  831,  828,  829,  826,  827,  830,  832,    0,  828,
      829,  826,  834,  830,  831,  825,  824,  856,  833,  835,
      830,  831,  833,  835,    0,    0,  826,  832,  831,  828,
      829,  826,  834,  830,  832,  836,  836,  837,  833,  834,
      830,  831,  857,  835,    0,  833,  835,  839,  831,  833,
      835,  839,  837,  840,  832,  841,  836,  837,    0,  834,
      838,  838,  836,  836,  837,  833,  844,  840,  841,  857,
      835,  839,  845,  840,  839,  841,  842,    0,  839,  837,
      840,  838,  841,  836,  837,  843,  844,  838,  838,  843,
      847,  842,  845,  844,  840,  841,  842,    0,  839,  845,

      840,  848,  841,  842,  846,  846,  849,    0,  838,  843,
      847,  850,  843,  844,  858,  850,  843,  847,  842,  845,
      849,  848,  859,  842,  852,  846,  849,    0,  848,  861,
      851,  846,  846,  849,  851,  850,  843,  847,  850,  862,
      865,  858,  850,  867,  852,  870,  872,  849,  848,  859,
      873,  852,  846,  849,  851,  876,  861,  851,  879,  880,
      883,  851,  850,  884,  886,  887,  862,  865,  888,  890,
      867,  852,  870,  872,  891,  895,  897,  873,  898,  899,
      904,  851,  876,  905,  906,  879,  880,  883,  907,  908,
      884,  886,  887,  909,  910,  888,  890,  909,  908,  911,

        0,  891,  895,  897,  906,  898,  899,  904,  907,  908,
      905,  906,  913,  911,  910,  907,  908,  909,  915,  911,
      909,  910,  912,    0,  909,  908,  911,  916,  914,  912,
      914,  906,  913,  915,    0,  907,  908,    0,  915,  913,
      911,  910,  912,  917,  909,  915,  911,  916,  919,  912,
      914,  918,  920,  918,  916,  914,  912,  914,    0,  913,
      915,  920,  921,  917,  922,  915,  923,  924,  919,  912,
      917,    0,  920,  918,  916,  919,  925,  914,  918,  920,
      918,  961,  921,    0,  922,  925,  923,  924,  920,  921,
      917,  922,    0,  923,  924,  919,  925,  927,  928,  920,

      918,  926,  929,  925,    0,    0,  930,  931,  961,  921,
      933,  922,  925,  923,  924,  934,  926,  927,  928,  932,
      935,  926,  929,  925,  927,  928,  930,  931,  926,  929,
      933,  936,  932,  930,  931,  934,  965,  933,  936,  932,
      935,  938,  934,  926,  927,  928,  932,  935,  926,  929,
      967,  936,  937,  930,  931,  939,  937,  933,  936,  932,
      940,  938,  934,  965,  941,  936,  932,  935,  938,  942,
      939,  943,  944,  943,  945,  939,  937,  967,  936,  937,
      940,    0,  939,  937,  941,  946,  944,  940,  938,  942,
      947,  941,  944,  943,  945,    0,  942,  939,  943,  944,

      943,  945,  939,  937,  949,  946,  968,  940,  948,  953,
      947,  941,  946,  944,  950,  948,  942,  947,  950,  944,
      943,  945,  951,  954,  949,  974,  951,    0,  948,  953,
      976,  949,  946,  968,    0,  948,  953,  947,  950,  952,
      955,  950,  948,  954,  956,  950,  951,  977,  957,  951,
      954,  949,  974,  951,  952,  948,  953,  976,  980,  952,
      955,  957,  958,  983,  956,  950,  952,  955,  957,  958,
      954,  956,  984,  951,  977,  957,  985,  988,  989,    0,
     1017,  952,  958,    0,    0,  980,  952,  955,  957,  958,
      983,  956,  991,  990,  992,  957,  958,  988,  989,  984,

      990,    0,  993,  985,  988,  989,  994, 1017,  995,  958,
      994,  996,  991,  990,  992,    0,  997,    0,  997,  991,
      990,  992,  993,    0,  988,  989,  996,  990,  995,  993,
      994,  996,  998,  994,  999,  995,  997,  994,  996,  991,
      990,  992, 1000,  997, 1001,  997, 1002, 1004, 1003,  993,
     1003,    0,  998,  996,  999,  995, 1006,  994,  996,  998,
     1007,  999, 1000,  997, 1001, 1005, 1002, 1004, 1008, 1000,
     1003, 1001,    0, 1002, 1004, 1003, 1006, 1003, 1005,  998,
     1007,  999, 1010, 1006, 1009, 1005, 1011, 1007, 1008, 1000,
     1013, 1001, 1005, 1002, 1004, 1008, 1014, 1003, 1013, 1009,

     1015, 1012, 1010, 1006, 1009, 1005, 1011, 1007, 1018, 1010,
     1013, 1009, 1005, 1011, 1012, 1008, 1014, 1013, 1016, 1021,
     1015, 1012, 1023, 1014, 1025, 1013, 1009, 1015, 1012, 1010,
     1026, 1009, 1028, 1011, 1030, 1018, 1028, 1013, 1016,    0,
     1029, 1012, 1031, 1014, 1033, 1016, 1021, 1015, 1012, 1023,
     1039, 1025, 1028, 1032, 1030, 1029,    0, 1026, 1035, 1028,
     1029, 1030, 1031, 1028, 1033, 1016, 1036, 1029, 1032, 1031,
     1034, 1033,    0, 1032, 1038, 1040, 1042, 1039, 1035, 1028,
     1032, 1030, 1029, 1034, 1046, 1035, 1036, 1029, 1037, 1031,
     1034, 1033, 1045, 1036, 1038, 1032, 1047, 1034, 1051, 1037,

     1032, 1038, 1040, 1042, 1046, 1035,    0, 1045, 1037, 1049,
     1034, 1046, 1045, 1036,    0, 1037, 1047, 1034, 1048, 1045,
     1050, 1038, 1054, 1047, 1055, 1051, 1037,    0, 1056, 1049,
     1058, 1046, 1048,    0, 1045, 1037, 1049,    0, 1048, 1045,
     1050,    0, 1054, 1047, 1055, 1048,    0, 1050, 1056, 1054,
     1058, 1055,    0,    0,    0, 1056, 1049, 1058,    0, 1048,
        0,    0,    0,    0,    0, 1048,    0, 1050,    0, 1054,
        0, 1055,    0,    0,    0, 1056,    0, 1058, 1060, 1060,
     1060, 1060, 1060, 1061,    0,    0, 1061, 1061, 1063, 1063,
     1063,    0, 1063, 1064,    0, 1064, 1064, 1064, 1065,    0,

     1065, 1065, 1065, 1066,    0, 1066, 1066, 1066, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 1965 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1979 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2266 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1060 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1059 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
/* */
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(CARDINALITY)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ENCODING)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DICT)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
/* */
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 138:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 145:
#line 210 "flex_lexer.l"
case 146:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 235 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3114 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1060 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1060 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1059);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 240 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

