#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 155
#define YY_END_OF_BUFFER 156
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1076] =
    {   0,
        0,    0,  152,  152,    2,    2,  156,  154,    4,    4,
      154,  154,  144,  150,  144,  144,  147,  144,  144,  144,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  144,  152,  153,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  139,    0,    1,  147,
      146,  145,  141,  140,  138,  142,  149,  149,  149,  149,

      149,  149,  149,  129,  149,  130,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  131,  149,  149,  132,  133,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  134,  135,
      136,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  137,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  143,  152,  151,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  148,  145,  114,  149,  149,  115,
      149,  149,  116,  149,  117,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  118,  149,  119,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  120,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  121,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  122,  149,  149,  123,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  124,  149,  149,
      125,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  126,  149,  149,  149,  149,  127,  149,
      149,  149,  149,  128,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  149,  149,

      149,  149,  149,  149,  149,   84,  149,  149,   85,   86,
      149,  149,  149,  149,   87,  149,  149,  149,  149,   88,
      149,  149,  149,   89,   90,  149,  149,  149,  149,  149,
      149,  149,  149,   91,  149,   92,   93,  149,  149,   94,
      149,   95,  149,   96,  149,  149,  149,  149,  149,  149,
       97,  149,   98,   99,  100,  149,  101,  149,  102,  149,
      149,  149,  149,  103,  149,  149,  149,  149,  149,  104,
      149,  149,  149,  149,  149,  149,  149,  149,  105,  149,
      149,  149,  149,  106,  107,  108,  109,  149,  149,  149,
      149,  149,  149,  149,  149,  110,  149,  111,  149,  112,

      113,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,   61,  149,   62,  149,   63,  149,
      149,  149,  149,  149,  149,  149,   64,  149,  149,  149,
       65,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,   66,   67,  149,   68,  149,  149,   69,  149,   70,
       71,  149,  149,  149,  149,   72,   73,   74,   75,  149,
       76,  149,  149,  149,   77,   78,  149,  149,  149,  149,
      149,   79,  149,  149,  149,  149,  149,   80,  149,  149,
      149,   81,  149,  149,  149,   82,  149,  149,  149,   83,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  149,  149,   35,  149,
      149,  149,   36,  149,   37,  149,  149,   38,   39,  149,
       40,  149,   41,   42,  149,   43,  149,  149,   44,   45,
      149,   46,   47,  149,  149,   48,   49,  149,  149,   50,
      149,  149,  149,   51,  149,   52,   53,   54,   55,  149,

       56,  149,  149,  149,   57,   58,   59,   60,  149,  149,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  149,   17,   18,  149,   19,   20,
       21,  149,   22,  149,  149,   23,   24,   25,   26,   27,
      149,   28,  149,  149,   29,   30,  149,   31,   32,  149,
      149,  149,   33,   34,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  149,  149,  149,   12,   13,  149,
       14,  149,   15,  149,  149,   16,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  149,  149,
      149,    9,  149,   10,   11,    2,    2,    2,    2,    2,
        2,    2,  149,  149,    7,    8,    2,    2,    2,    2,
        5,    6,    2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1083] =
    {   0,
        0,    0,  420,  383,   67,    0,  386, 4288,  133,  135,
      368,    0, 4288, 4288,  131,  359,  133,  132,  356,  349,
      129,  129,  137,  175,  173,  224,  128,  185,  216,  122,
      134,  229,  232,  258,  264,  187,    0,  245,  286,  329,
      274,  141,  275,  139,  282,    0,  314,    0,  168,  206,
      293,  266,    0,    0,  154,  256,  205,  209,  252,  249,
      387,  454,  508,  560,  608,  660,  314,  383,  708,  308,
      317,  446,  451,  760,  808,  472,  320,  460,  858,  910,
      516,  562,  520,  338,  192,  286, 4288,  251, 4288,  299,
      226,  213, 4288, 4288, 4288, 4288,    0,  185,  171,  197,

      315,  396,  222,  284,  383,    0,  456,  323,  390,  402,
      319,  442,  598,  377,  388,  395,  393,  516,  410,  647,
      452,  460,  465,  492,  500,  510,  516,  524,  551,  560,
      543,    0,  567,  564,  697,  567,  573,  559,  583,  608,
      627,  597,  604,  610,  615,  619,  631,  652,  658,    0,
      667,  653,  658,  681,  710,  704,  690,  696,  750,  692,
      692,  724,  727,  718,  750,  727,  726,  735,  743,  759,
      763,  760,  761,  798,  767,  757,  782, 4288,    0, 4288,
        0,  309,    0,  214,    0,  307,  201,  181,    0,    0,
        0,    0,  800,  813,  830,  862,  897,  853,  854,  918,

      948,  843,  946,  958,  962,  964,  908,  977, 1029,  994,
     1012, 1000, 1026, 1062, 1044, 1112, 1031, 1072, 1074, 1077,
     1093, 1095, 1098, 1126, 1114, 1148, 1144, 1147, 1152, 1165,
     1214, 1188, 1178, 1180, 1210, 1239, 1253, 1264, 1243, 1283,
     1267, 1281, 1268, 1297, 1298, 1285, 1307, 1316, 1322, 1341,
     1346, 1351, 1355, 1356, 1374, 1370, 1391, 1400, 1409, 1405,
     1422, 1424, 1426, 1443, 1458, 1455, 1467, 1472, 1484, 1495,
     1480, 1506, 1516,    0, 4288,  162,    0,  779,  775,    0,
      802,  803,    0,  818,    0,  809,  814,  858,  867, 1206,
      858,  859,  869,  903,  901,    0,  929,    0,  954,  976,

     1483,  981, 1018, 1008, 1051, 1043, 1080, 1156,    0, 1173,
     1190, 1221, 1207, 1235, 1231, 1299, 1321, 1356,    0, 1402,
     1406, 1453, 1480, 1510, 1513, 1505, 1513, 1516, 1524, 1522,
     1534, 1537, 1538, 1541, 1529, 1537,    0, 1534, 1550, 1548,
     1555, 1562, 1558, 1560, 1550, 1552, 1553,    0, 1563, 1558,
     1560, 1575, 1580, 1586, 1574, 1573, 1578, 1592, 1575, 1588,
     1592, 1585, 1599,    0, 1582, 1588, 1589, 1598,    0, 1595,
     1593, 1603, 1614,    0, 1616, 1611, 1610, 1628, 1619, 1613,
     1636, 1618, 1622, 1629, 1637, 1631,    0,  156, 1646, 1654,
     1657, 1658, 1659, 1668, 1660, 1676, 1662, 1690, 1694, 1691,

     1720, 1724, 1716, 1732, 1730, 1735, 1754, 1733, 1764, 1765,
     1766, 1787, 1788, 1796, 1770, 1804, 1802, 1798, 1820, 1828,
     1832, 1837, 1841, 1856, 1858, 1862, 1850, 1866, 1871, 1904,
     1874, 1902, 1908, 1914, 1916, 1920, 1926, 1945, 1954, 1958,
     1956, 1970, 1892, 1948, 1964, 1994, 1966, 1979, 2000, 2008,
     2002, 2012, 2025, 2034, 2036, 2040, 2046, 2064, 2058, 2048,
     2070, 2094, 2082, 2088, 2092, 2120, 2118, 2122, 2124, 2130,
     2146, 2128, 2136, 2152, 2164, 2170, 2174, 2180, 2198, 2196,
     2182, 2204, 2226, 2228, 2185, 2234, 2238, 2250, 2239, 2271,
     2263, 2280, 2284, 2288, 2301, 2317, 2292, 2325, 1721, 1742,

     1765, 1886, 1897, 1912, 2010,    0, 2040, 2057,    0,    0,
     2068, 2073, 2083, 2096,    0, 2174, 2171, 2191, 2256,    0,
     2280, 2289, 2295,    0,    0, 2314, 2303, 2313, 2316, 2319,
     2340, 2346, 2346,    0, 2332,    0,    0, 2353, 2339,    0,
     2345,    0, 2345,    0, 2356, 2345, 2341, 2349, 2353, 2365,
        0, 2361,    0,    0,    0, 2355,    0, 2364,    0, 2375,
     2365, 2381, 2373,    0, 2390, 2390, 2378, 2379, 2388,    0,
     2403, 2404, 2393, 2390, 2389, 2400, 2400, 2412,    0, 2412,
     2410, 2416, 2410,    0,    0, 2407,    0, 2424, 2415, 2409,
     2433, 2417, 2431, 2434, 2435,    0, 2424,    0, 2442,    0,

        0, 2444, 2446, 2450, 2454, 2455, 2472, 2468, 2476, 2494,
     2504, 2486, 2489, 2510, 2522, 2528, 2520, 2526, 2532, 2538,
     2556, 2564, 2568, 2574, 2582, 2590, 2580, 2592, 2605, 2622,
     2623, 2620, 2626, 2655, 2666, 2618, 2644, 2657, 2654, 2656,
     2692, 2687, 2690, 2696, 2700, 2708, 2706, 2709, 2711, 2721,
     2744, 2746, 2750, 2722, 2754, 2760, 2762, 2765, 2783, 2775,
     2799, 2794, 2796, 2817, 2808, 2800, 2829, 2850, 2834, 2852,
     2853, 2863, 2842, 2882, 2888, 2886, 2903, 2904, 2887, 2917,
     2920, 2912, 2928, 2938, 2936, 2952, 2941, 2954, 2957, 2960,
     2992, 2973, 2986, 2995, 2996, 3008, 2994, 3024, 3005, 3030,

     3036, 3040, 3045, 3048,    0, 2451,    0, 2457,    0, 2517,
     2550, 2580, 2609, 2649, 2768, 2818,    0, 2814, 2867, 2949,
        0, 2955, 3017, 3031, 3030, 3047, 3034, 3044, 3048, 3060,
     3068,    0,    0, 3062,    0, 3068, 3065,    0, 3064,    0,
        0, 3065, 3081, 3068, 3077,    0,    0,    0,    0, 3085,
        0, 3092, 3087, 3079,    0,    0, 3098, 3086, 3087, 3101,
     3098,    0, 3107, 3105, 3095, 3114, 3118, 3102, 3105, 3104,
     3124,    0, 3122, 3124, 3124,    0, 3118, 3137, 3138,    0,
     3135, 3136, 3144, 3148, 3152, 3153, 3154, 3157, 3186, 3167,
     3178, 3170, 3189, 3208, 3219, 3202, 3207, 3223, 3221, 3220,

     3252, 3224, 3258, 3260, 3262, 3277, 3286, 3274, 3290, 3312,
     3295, 3296, 3314, 3318, 3320, 3328, 3329, 3351, 3330, 3360,
     3363, 3352, 3364, 3368, 3369, 3382, 3385, 3404, 3403, 3419,
     3394, 3408, 3417, 3425, 3436, 3420, 3453, 3442, 3458, 3471,
     3459, 3488, 3496, 3490, 3482, 3512, 3524, 3513, 3521, 3526,
     3530, 3536, 3555, 3538, 3566, 3564, 3214, 3232,    0, 3233,
     3265, 3264, 3312, 3324,    0, 3388, 3433,    0,    0, 3547,
        0, 3540,    0,    0, 3567,    0, 3561, 3559,    0,    0,
     3558,    0,    0, 3566, 3580,    0,    0, 3574, 3591,    0,
     3573, 3590, 3572,    0, 3597, 3584,    0,    0,    0, 3592,

        0, 3604, 3607, 3589,    0,    0,    0,    0, 3596, 3603,
     3620, 3612, 3618, 3624, 3646, 3621, 3635, 3650, 3634, 3658,
     3672, 3674, 3675, 3688, 3680, 3689, 3690, 3691, 3703, 3704,
     3720, 3726, 3712, 3728, 3734, 3742, 3743, 3744, 3745, 3758,
     3760, 3776, 3786, 3774, 3797, 3788, 3798, 3799, 3802, 3814,
     3811, 3816, 3820, 3830, 3832, 3860, 3866, 3854, 3848, 3851,
     3865, 3870, 3891, 3899, 3637,    0,    0, 3699,    0,    0,
        0, 3756,    0, 3751, 3775,    0,    0,    0,    0,    0,
     3875,    0, 3863, 3882,    0,    0, 3873,    0,    0, 3881,
     3894, 3905,    0,    0, 3908, 3910, 3914, 3920, 3916, 3922,

     3924, 3952, 3939, 3953, 3956, 3962, 3964, 3970, 3974, 3978,
     4004, 3987, 3993, 3988, 3992, 3996, 4022, 4018, 4026, 4028,
     4036, 4027, 4030, 4032, 4054, 4056, 4046,    0,    0, 4047,
        0, 4053,    0, 4047, 4059,    0, 4072, 4078, 4080, 4081,
     4084, 4106, 4090, 4116, 4112, 4114, 4124, 4118, 4076, 4081,
     4115,    0, 4106,    0,    0, 4130, 4149, 4146, 4152, 4154,
     4155, 4158, 4151, 4150,    0,    0, 4180, 4183, 4184, 4186,
        0,    0, 4188, 4192, 4288, 4257, 4262,  135, 4267, 4272,
     4277, 4282
    } ;

static const flex_int16_t yy_def[1083] =
    {   0,
     1075,    1, 1076, 1076, 1075,    5, 1075, 1075, 1075, 1075,
     1075, 1077, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1075, 1079, 1075, 1080, 1080, 1075,
     1080, 1081, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1082, 1082,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1080, 1075, 1075, 1077, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1078, 1078, 1078, 1078,

     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1075, 1079, 1075,
     1080, 1080, 1080, 1081, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62, 1080, 1075, 1075, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,

     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1080, 1080,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1078, 1078,

     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,

     1078,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,

     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1078, 1078,
     1078, 1078, 1078, 1078, 1078,   62,   62,   62,   62,   62,
       62,   62, 1078, 1078, 1078, 1078,   62,   62,   62,   62,
     1078, 1078,   62,   62,    0, 1075, 1075, 1075, 1075, 1075,
     1075, 1075
    } ;

static const flex_int16_t yy_nxt[4356] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  105,   99,  100,  137,
      107,  138,  127,  101,  173,  102,  177,  108,  128,  103,
      104,  185,  174,  186,  109,  388,  106,  110,  111,  182,
       86,  276,   98,  105,   99,  100,  137,  107,  138,  127,
      101,  173,  102,  177,  108,  128,  103,  104,  112,  174,
      388,  109,  113,  106,  110,  111,  114,  117,  129,  118,

      153,  277,  115,  278,  119,  116,  130,   86,   86,  120,
      187,  154,  131,  188,  186,  112,  279,  155,  387,  113,
      189,  190,  276,  114,  117,  129,  118,  153,  277,  115,
      278,  119,  116,  130,  132,   91,  120,  121,  154,  131,
      133,  134,  135,  279,  155,  122,  139,  136,  123,  142,
      140,  124,  284,  143,  125,  275,  141,  126,  274,  144,
      192,  132,  156,  191,  121,  187,  157,  133,  134,  135,
      181,  145,  122,  139,  136,  123,  142,  140,  124,  284,
      143,  125,  149,  141,  126,  146,  144,   86,   86,  156,
      150,  147,  148,  157,  151,  175,  176,  152,  145,  285,

      170,  158,  171,  159,  183,  172,  160,   92,   90,  149,
      182,   86,  146,  161,  162,  188,  186,  150,  147,  148,
      180,  151,  175,  176,  152,  193,  285,  170,  158,  171,
      159,  193,  172,  160,  234,  233,  291,  193,  223,  280,
      161,  162,  163,  164,  224,  193,  165,  281,  178,  166,
      167,  193,  193,  296,  193,  273,  168,  193,  193,  169,
       96,  234,  233,  291,  193,  223,  280,   95,   91,  163,
      164,  224,  193,  165,  281,  193,  166,  167,  193,   87,
      296,  193,  273,  168,  193, 1075,  169,  181,  181,   47,
      181,  181,  181,  181,  181,  181,  225,  181,  181,  181,

      193,  286,  193,  194,  226,  195,  196,  303,  304,  282,
      227,  197,  283,  198,  292,  287,  293,  199,  200,  294,
      193,  305,  306,  225,  307,  310,   47,  193,  286,  295,
      194,  226,  195,  196,  303,  304,  282,  227,  197,  283,
      198,  292,  287,  293,  199,  200,  294,  193,  305,  306,
     1075,  307,  310,  181,  181,  181,  295,  181,  181,  181,
      181,  181,  181,  235,  181,  181,  181,  236,  238, 1075,
     1075,  201,  239,  237,  297, 1075,  316,  252,  240,  298,
      288,  253, 1075,  193,  317,  249,  289,  290,  193,  193,
      235,  202,  318, 1075,  236,  238,  250,  193,  201,  239,

      237,  297,  251,  316,  252,  240,  298,  288,  253,  193,
      193,  317,  249,  289,  290,  193,  193, 1075,  202,  318,
      181,  203,  319,  250,  193,  193, 1075,  320,  204,  251,
     1075,  308,  309,  193,  321,  205,  193,  193,  206,  207,
      271,  272,  266,  322,  267,  193, 1075,  268,  203,  319,
     1075,  323,  193,  193,  320,  204, 1075,  193,  308,  309,
      193,  321,  205, 1075,  193,  206,  207,  271,  272,  266,
      322,  267,  193,  208,  268,  269,  328,  209,  323,  193,
      193,  210,  324,  270,  193,  325,  326,  211,  329, 1075,
      212,  327,  330,  335,  336, 1075,  337,  193, 1075,  193,

      208,  338,  269,  328,  209, 1075,  193, 1075,  210,  324,
      270,  299,  325,  326,  211,  329,  300,  212,  327,  330,
      335,  336,  301,  337,  193,  193,  193,  344,  338,  302,
      345,  339,  213,  340,  214, 1075,  346, 1075,  299,  215,
      341, 1075,  342,  300,  216,  193, 1075,  347, 1075,  301,
     1075,  348,  193,  343,  344,  349,  302,  345,  339,  213,
      340,  214,  311,  346,  312,  350,  215,  341,  313,  342,
     1075,  216,  193,  217,  347,  314,  351,  193,  348,  315,
      343,  218,  349,  352,  219,  353, 1075,  220,  354,  311,
      221,  312,  350,  222,  355,  313, 1075,  193, 1075, 1075,

      217, 1075,  314,  351,  193, 1075,  315, 1075,  218,  360,
      352,  219,  353,  331,  220,  354,  361,  221, 1075,  365,
      222,  355,  366,  332,  193,  193,  228,  356,  333,  334,
      358,  357,  229,  230,  231,  359,  360,  367, 1075,  232,
      331,  368,  369,  361,  372,  193,  365, 1075, 1075,  366,
      332,  373,  193,  228,  356,  333,  334,  358,  357,  229,
      230,  231,  359,  374,  367,  362,  232, 1075,  368,  369,
     1075,  372,  193,  241,  363,  370,  375,  193,  373,  378,
      376,  379,  364,  377,  384,  380,  371,  242, 1075,  385,
      374,  381,  362,  243,  244,  386,  499,  193, 1075, 1075,

      241,  363,  370,  375,  193,  500,  378,  376,  379,  364,
      377,  384,  380,  371,  242,  382,  385,  193,  381,  501,
      243,  244,  386,  499,  193,  193,  245,  502,  383,  389,
      193,  503,  500, 1075,  246, 1075,  504,  193,  247, 1075,
     1075,  248,  382, 1075,  193,  193,  501,  193, 1075,  505,
      193, 1075,  193,  245,  502,  383,  389,  193,  503, 1075,
      193,  246,  390,  504,  193,  247,  394,  193,  248,  395,
      193,  193,  193,  254,  193,  255,  505,  193,  256,  193,
      193,  391,  506,  507,  396,  257,  258,  193,  510,  390,
      193,  193,  511,  394,  193,  193,  395,  193,  193,  193,

      254,  512,  255, 1075, 1075,  256,  193,  193,  391,  506,
      507,  396,  257,  258,  193,  510,  513,  193,  193,  511,
     1075,  392,  193,  259,  260,  193,  193,  261,  512,  393,
      262,  263,  514,  397,  193,  193, 1075,  264, 1075, 1075,
      265,  193,  408,  513, 1075,  193,  515,  193,  392, 1075,
      259,  260,  193, 1075,  261,  193,  393,  262,  263,  514,
      397,  193,  193,  193,  264,  193,  398,  265, 1075,  408,
      400,  403,  193,  515,  193,  193,  401,  402,  516,  193,
      399,  406,  193,  193, 1075,  193,  404, 1075,  405,  517,
      193,  407,  193,  398,  193,  193,  520,  400,  403,  193,

     1075,  193,  193,  401,  402,  516,  193,  399,  406,  409,
      193,  193,  193,  404,  410,  405,  517,  193,  407, 1075,
     1075,  193,  193,  520,  415,  416,  193,  418,  193,  193,
     1075,  193, 1075, 1075, 1075,  521,  409,  193,  193, 1075,
      522,  410,  411,  193,  193,  417,  193,  412,  193,  193,
     1075,  415,  416,  413,  418,  428,  193,  419,  193,  422,
      414,  193,  521,  193,  193,  523,  193,  522,  193,  411,
      193,  524,  417,  193,  412,  193,  193,  420,  421,  193,
      413,  193,  428, 1075,  419, 1075,  422,  414,  193,  193,
      193,  193,  523,  193,  193,  193,  429,  525,  524,  193,

     1075,  430, 1075, 1075,  420,  421,  193,  431,  193,  193,
      193,  193,  193, 1075,  193,  193,  193, 1075,  193,  433,
      432,  193, 1075,  429,  525,  434,  193,  423,  430,  424,
      193,  193,  193,  425,  431,  193,  193,  193,  193,  193,
      426,  193,  193,  193,  427,  436,  433,  432,  437,  193,
     1075,  193,  434,  435,  423, 1075,  424,  193,  193,  193,
      425,  193,  193,  193,  193,  193, 1075,  426, 1075,  193,
      193,  427,  436,  441,  438,  437,  193,  440,  193,  439,
      435,  193,  193,  526,  193,  193,  527, 1075,  193,  193,
      193,  193,  193,  442, 1075,  193,  193,  193, 1075,  448,

      441,  438,  193, 1075,  440,  193,  439,  528,  193,  193,
      526,  193,  193,  527,  447,  193,  193,  449, 1075, 1075,
      442,  508,  193,  509,  193,  193,  448,  193,  450,  193,
      443,  193,  193, 1075,  528, 1075,  529, 1075,  530, 1075,
      444,  447,  193, 1075,  449,  445,  446,  193,  508, 1075,
      509,  193,  193, 1075,  193,  450,  193,  443,  193,  531,
      193,  532,  451,  529,  452,  530,  453,  444,  454,  457,
      193, 1075,  445,  446,  193, 1075,  193, 1075,  193,  455,
      193,  193, 1075,  193,  193,  193,  531,  193,  532,  451,
      193,  452,  461,  453,  456,  454,  457,  193,  193,  459,

      193,  193,  193,  193,  193,  193,  455,  193,  193,  458,
      462,  193,  193,  460,  193,  193,  463,  193,  193,  461,
      193,  456,  193,  464,  193,  193,  459,  193,  193,  193,
      533,  193,  193,  193,  193,  193,  458,  462,  534,  193,
      460,  193,  193,  463,  193,  193, 1075,  193,  465,  193,
      464,  193,  466,  193,  467, 1075, 1075,  533,  193,  193,
      193,  193,  193,  468, 1075,  534,  193,  469,  193,  535,
     1075,  193,  193,  193,  472,  465,  473,  470,  193,  466,
      193,  467,  471,  193, 1075,  193,  193,  193,  193,  474,
      468,  193,  193,  193,  469,  193,  535,  477,  475,  193,

      193,  472, 1075,  473,  470,  193,  476,  193,  193,  471,
      193,  193, 1075,  479,  193,  193,  474,  193,  193,  193,
      193,  478,  193,  480,  477,  475,  193,  536,  193,  481,
      537, 1075, 1075,  476,  193,  193, 1075,  193,  193,  193,
      479,  484,  193,  193,  193, 1075,  193,  482,  478,  193,
      480,  485, 1075,  193,  536,  193,  481,  537,  483,  193,
      193,  193, 1075,  193,  193, 1075,  193,  538,  484,  193,
      193,  486,  193,  193,  482,  193,  488, 1075,  485,  489,
      193, 1075, 1075,  490,  193,  483,  193,  193,  193,  193,
      193,  487,  193,  491,  538,  193, 1075,  496,  486,  193,

      518,  193,  193,  488,  193, 1075,  489,  193,  492,  193,
      490,  193,  494,  539,  493,  519,  193,  193,  487,  193,
      491,  193,  193,  193,  496,  495, 1075,  518,  193,  498,
      540,  193,  193,  193,  541,  492,  193,  542,  497,  494,
      539,  493,  519,  193,  193,  543,  544,  545,  193,  546,
      193,  547,  495,  193,  548,  549,  498,  540,  550,  193,
      193,  541,  552,  553,  542,  497,  554,  555,  551,  556,
      193,  557,  543,  544,  545,  558,  546,  559,  547,  560,
      193,  548,  549,  561,  562,  550,  563,  564,  565,  552,
      553,  566,  567,  554,  555,  551,  556,  568,  557,  569,

      570,  571,  558,  572,  559,  573,  560,  574,  575,  576,
      561,  562,  577,  563,  564,  565,  578,  579,  566,  567,
      580,  581,  582,  583,  568,  584,  569,  570,  571,  585,
      572,  586,  573,  587,  574,  575,  576,  591,  589,  577,
      590,  592,  588,  578,  579,  593,  594,  580,  581,  582,
      583,  595,  584,  596,  597,  598,  585,  600,  586,  599,
      587,  601, 1075,  193,  591,  589, 1075,  590,  592,  588,
     1075,  602,  593,  594,  193,  193,  604,  193,  595,  193,
      596,  597,  598,  193,  600,  193,  599,  603,  601,  606,
      193,  193,  605,  193,  193,  193,  193,  193,  602,  193,

     1075,  193,  193,  604,  193,  193,  193,  193,  193, 1075,
      193,  193,  193,  193,  603,  609,  606,  607,  193,  605,
      193,  193,  193,  193,  193, 1075,  193,  193,  193,  608,
     1075,  193,  193,  193,  193,  193,  610,  193,  193,  611,
      193,  612,  609, 1075,  607, 1075,  613,  193,  616,  193,
      193,  705,  193,  193,  193,  193,  608,  193,  193,  706,
      193,  193,  615,  610,  193,  614,  611,  193,  612,  193,
      193,  193,  193,  613,  193,  616,  193,  193,  705,  193,
      193,  618,  193,  193,  193,  617,  706,  624,  193,  615,
      619,  193,  614, 1075,  193,  707,  193,  193,  193,  193,

      620,  193,  193,  193,  193,  621, 1075,  193,  618,  193,
      193,  623,  617,  193,  624,  193,  626,  619,  193,  193,
      622,  193,  707, 1075,  193,  193,  627,  620,  193,  193,
      193,  193,  621,  193,  193,  193,  625,  628,  623,  193,
      193,  193,  193,  626, 1075,  193,  193,  622,  193,  193,
      630,  193,  193,  627,  193,  629, 1075,  193,  631, 1075,
      193, 1075,  193,  625,  628,  193,  193,  193,  193,  193,
     1075,  632,  193,  193,  193,  193,  193,  630,  193,  193,
      635,  193,  629,  193,  193,  631,  634,  193,  637,  633,
     1075,  193,  193,  193,  193,  193,  193,  636,  632,  193,

      193,  193,  193,  193, 1075,  193,  193,  635,  193,  650,
      193,  193, 1075,  634,  193,  637,  633,  638,  193,  193,
      193,  193,  193,  708,  636,  193,  193,  639,  641,  193,
      193,  193,  640,  193,  709,  193,  650,  193,  193,  193,
      643,  193,  710,  193,  638,  193,  193,  644,  193,  642,
      708,  193,  193,  193,  639,  641,  193,  193,  193,  640,
      193,  709,  193,  193,  193,  651,  193,  643,  193,  710,
      193,  193,  193,  193,  644,  193,  642,  645,  193,  648,
      193,  652,  193,  193,  193,  193,  646,  193,  647,  193,
      193,  193,  651,  193, 1075,  193,  193,  649,  193,  655,

      193,  193,  193,  193,  645,  656,  648,  193,  652,  193,
      193,  653,  193,  646,  193,  647,  193,  193,  193,  658,
      193,  654,  193,  193,  649,  193,  655,  711,  193,  193,
      193,  193,  656,  659,  193, 1075, 1075,  193,  653,  193,
      657,  660,  193,  193,  193,  193,  658,  661,  654,  193,
     1075,  193,  193,  193,  711,  662,  193,  193,  193,  663,
      659,  712,  193,  193,  193,  193,  193,  657,  660,  193,
      713,  193,  193,  193,  661,  193,  193,  193,  193,  664,
      193,  193,  662,  193,  193,  193,  663,  193,  712,  193,
      193,  666,  193,  714,  667,  193,  665,  713,  193,  193,

      193,  193,  193,  715,  193,  670,  664,  193,  193,  671,
      193,  193,  193,  669,  193,  716, 1075, 1075,  666,  193,
      714,  667,  193,  665,  668,  193,  193,  717,  193,  193,
      715,  193,  670,  672,  193,  193,  671,  193,  193,  193,
      669,  193,  716,  676,  673,  193,  193,  193,  678,  675,
      674,  668,  193,  679,  717,  193,  193,  193,  193,  193,
      672,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      676,  673,  193,  193,  193,  678,  675,  674,  677,  680,
      679,  681,  193,  193,  193, 1075,  193,  193,  193,  193,
      193,  193,  193, 1075,  193, 1075,  193,  193,  718,  193,

      193,  193,  689, 1075,  719,  677,  680,  193,  681,  682,
      193,  193,  683,  193,  193,  193,  193,  193,  193,  193,
      685,  193,  193,  720,  193,  718,  193, 1075,  193,  689,
      684,  719,  686,  193,  193,  193,  682, 1075,  193,  683,
      193,  193,  193,  193,  193,  193,  193,  685,  193,  193,
      720,  193, 1075, 1075,  688,  690,  193,  684,  687,  686,
      193, 1075,  193,  193,  691,  193,  694,  193,  193,  721,
      193,  193,  193, 1075, 1075,  193,  193,  692,  193,  693,
      193,  688,  690,  193,  695,  687, 1075,  193,  193,  696,
      193,  691,  193,  694,  193,  722,  721,  193,  193,  698,

      193,  193,  193,  193,  692,  193,  693,  193,  193,  193,
      723,  695,  703,  697,  193,  193,  696,  193,  193,  724,
     1075,  193,  722,  699,  193,  193,  698,  193,  193,  193,
      725,  726,  193,  700,  193,  193,  193,  723,  193,  703,
      697,  727,  193,  701,  193,  193,  724,  702,  193,  728,
      699,  729,  193,  730,  193,  704,  193,  725,  726,  731,
      700,  193,  193,  732,  733,  193,  734,  735,  727,  193,
      701,  736,  737,  738,  702,  739,  728,  740,  729,  741,
      730,  193,  704,  742,  743,  745,  731,  746,  747,  193,
      732,  733,  748,  734,  735,  744,  749,  750,  736,  737,

      738,  751,  739,  752,  740,  753,  741,  754,  755,  756,
      742,  743,  745,  757,  746,  747,  758,  759,  760,  748,
      761,  762,  744,  749,  750,  763,  764,  765,  751,  766,
      752,  767,  753,  768,  754,  755,  756,  769,  770,  771,
      757,  772,  773,  758,  759,  760,  774,  761,  762,  775,
      776,  777,  763,  764,  765,  778,  766,  779,  767,  780,
      768,  193, 1075,  782,  769,  770,  771,  193,  772,  773,
      857,  193,  193,  774,  781, 1075,  775,  776,  777, 1075,
      783,  193,  778,  193,  779,  787,  780,  193,  193,  193,
      782,  784,  785,  193,  193,  858, 1075,  857,  193,  193,

     1075,  781,  786,  193, 1075,  193,  193,  783,  193,  193,
      193,  193,  787,  193,  193,  788,  193,  789,  784,  785,
      193,  193,  858,  193, 1075, 1075,  193,  193, 1075,  786,
      193,  193,  193,  193,  859,  790,  193,  193,  193,  193,
      193,  193,  788,  193,  789,  193, 1075,  193,  193,  193,
      193,  793,  791,  193,  193,  193,  794,  193,  193,  193,
      792,  859,  790,  193,  193,  193,  193,  860,  193,  193,
      193,  795,  193,  193,  193,  193,  193,  797,  793,  791,
     1075,  193,  193,  794,  193,  193,  193,  792,  796,  798,
      193,  193,  193,  193,  860, 1075,  193,  193,  795,  193,

      193,  193,  193,  799,  797,  193,  861,  193,  193,  193,
     1075,  193,  193, 1075,  800,  796,  798,  193,  193,  193,
      193,  801,  193, 1075,  193,  862,  193,  193,  193,  193,
      799, 1075,  193,  861,  193,  808,  193,  193,  193,  193,
      193,  800,  193,  193,  193, 1075,  193, 1075,  801,  193,
      802,  803,  862,  804,  193,  193,  193,  193,  805,  193,
      193,  193,  808,  193,  193, 1075,  193,  193,  806,  193,
      193,  193,  193,  193,  193,  863, 1075,  802,  803,  807,
      804,  193,  193,  193,  193,  805,  193,  193,  193,  809,
      193,  193,  193,  193,  193,  806, 1075, 1075,  193,  193,

      193,  193,  863,  193,  193,  810,  807,  193,  193,  193,
      193, 1075, 1075,  193, 1075,  811,  809,  193,  193,  193,
      193,  193,  812,  193,  193,  193,  814,  193,  193,  193,
      193,  193,  810,  193,  193,  813,  193,  193,  193,  193,
      193,  815,  811,  193,  193,  193,  193, 1075,  193,  812,
      193,  193,  193,  814,  193,  193,  193,  816,  193,  193,
      193,  193,  813,  193,  193,  193,  193,  193,  815,  819,
      193,  193,  193,  193,  817,  193,  818,  193,  821,  193,
      820,  193,  193,  193,  816,  193,  193,  193,  193, 1075,
      193,  193,  193, 1075,  193,  864,  819,  193,  193,  193,

      193,  817,  193,  818,  193,  821,  193,  820,  193,  193,
      193,  193,  193,  824,  193,  822,  193,  193,  193,  193,
      193, 1075,  864,  823,  193,  193,  193,  193,  827,  193,
      828,  193, 1075,  193,  193,  865,  193,  193,  193,  193,
      824,  866,  822,  193,  193,  193,  193,  193,  825,  826,
      823,  830,  193, 1075,  193,  827, 1075,  828,  193,  193,
      193,  193,  865,  193,  193,  829,  193,  193,  866,  193,
      193,  193,  193,  193, 1075,  825,  826, 1075,  830,  193,
      193,  193,  831,  832, 1075, 1075,  193,  193,  833,  193,
      193,  867,  829,  193,  193,  834,  193,  193,  193,  193,

      193,  835, 1075,  193,  193,  193,  193,  193, 1075,  831,
      832,  836,  839, 1075,  193,  833,  193,  193,  867,  193,
      193,  193,  834,  193,  193,  193,  193,  193,  835,  193,
      193,  193,  193,  837,  193,  841,  838,  193,  836,  839,
      193,  193, 1075,  840, 1075,  842,  193,  193,  193,  193,
      193,  193,  193,  844,  193,  193,  193,  193,  193,  843,
      837,  193,  841,  838,  193,  193,  868,  193,  193,  193,
      840,  193,  842,  193,  193,  193,  193,  193,  193,  845,
      844,  193,  193, 1075,  193,  193,  843,  869,  846,  193,
      193,  193,  193,  868,  193, 1075,  193,  193,  193,  848,

      193,  193,  193,  193,  193,  193,  845,  847,  850,  193,
      193,  853,  193,  193,  869,  846,  193,  193,  193,  849,
     1075,  193,  193,  193,  193,  193,  848,  852,  851,  193,
      193,  193,  193,  193,  847,  850,  193,  193,  853,  193,
      193,  193,  193,  870,  854,  193,  849,  193,  871,  193,
      193,  872,  193,  193,  852,  851,  193,  856,  193,  193,
      193,  193,  193,  855,  873,  193,  874,  193,  193,  193,
      870,  854,  193,  193,  193,  871,  875,  193,  872,  876,
      193,  877,  193,  878,  856,  193,  879,  880,  193,  193,
      855,  873,  193,  874,  193,  881,  882,  883,  884,  885,

      193,  886,  887,  875,  193,  888,  876,  889,  877,  193,
      878,  890,  193,  879,  880,  891,  892,  893,  894,  895,
      896,  897,  881,  882,  883,  884,  885,  898,  886,  887,
      899,  900,  888,  901,  889,  902,  903,  904,  890,  905,
      906,  907,  891,  892,  893,  894,  895,  896,  897,  908,
      909,  910,  193,  193,  898,  911, 1075,  899,  900, 1075,
      901,  193,  902,  903,  904,  193,  905,  906,  907,  193,
      913,  914,  193,  193,  193, 1075,  908,  909,  910,  193,
      193,  193,  911,  915,  193,  193,  912,  919,  193,  193,
      193,  193,  193,  917,  193,  193,  193,  913,  914,  193,

      193,  193,  916,  193,  193,  918,  193,  193,  193, 1075,
      915,  193,  193,  912,  919,  193,  193,  193,  193,  922,
      917,  193,  193,  193,  193,  193,  193,  965, 1075,  916,
      193,  193,  918,  193,  193,  920,  193,  925,  193,  193,
      193,  927,  193,  921,  193,  193,  922,  924, 1075,  966,
      193,  193,  193,  193,  965,  923,  193,  193,  193,  967,
      193,  193,  920,  193,  925,  193,  193,  193,  927,  193,
      921,  193,  193,  926,  924,  193,  966,  193,  968,  193,
     1075,  969,  923,  193,  193,  193,  967,  193,  193,  193,
      928,  193,  929,  930,  193,  193,  193,  193,  931,  193,

      926,  932,  193,  193,  193,  968,  193,  193,  969, 1075,
     1075,  193,  193,  193,  193,  934,  193,  928,  193,  929,
      930,  193,  193,  193,  193,  931,  193,  193,  932,  193,
      193,  193,  193,  193,  193,  193,  933,  193,  193,  193,
      193,  193,  934,  970,  935,  193,  193,  938,  971,  193,
      193,  193,  936, 1075,  193,  193,  193,  193,  193,  193,
      193, 1075,  193,  933,  193,  193,  193,  193,  193,  193,
      970,  935,  193,  193,  938,  971,  193,  193,  193,  936,
      193,  193,  193,  937,  193,  193,  193,  940,  193,  193,
     1075,  939,  193,  193,  193,  193,  193,  193, 1075,  941,

      193,  193,  193,  972,  193,  193,  193,  193,  193, 1075,
      937,  193,  193,  193,  940,  193,  193,  942,  939,  193,
      193,  193,  193,  943,  193,  193,  941,  193,  193,  193,
      972,  193,  193,  193,  945, 1075,  193,  948,  193, 1075,
      193,  193,  193, 1075,  942,  193,  193,  193,  193,  193,
      943,  944,  193,  193,  193,  946,  193,  193,  193,  193,
     1075,  945,  193,  193,  948,  973,  947,  193,  193,  193,
      193,  950,  193,  193,  949,  193,  193, 1075,  944,  193,
      193,  193,  946,  193,  193, 1075,  193,  951,  193,  193,
      193,  952,  973,  947, 1075,  193,  193,  193,  950,  193,

      193,  949,  193,  193,  953,  193,  193,  193,  193,  954,
     1075, 1075,  956,  193,  951,  193, 1075,  193,  952,  193,
     1075,  955,  193,  193, 1075,  193,  193,  193, 1075,  193,
      193,  953,  193,  193,  193,  193,  954,  958,  959,  956,
      193,  193,  960,  193,  957, 1075,  193,  961,  955,  193,
      193,  963,  193,  193,  193,  193,  193,  193,  193, 1075,
      193,  193,  974,  193,  958,  959,  975,  193,  193,  960,
      193,  957,  193,  193,  961,  193,  193,  193,  963,  964,
      193,  193,  193,  193,  976,  193,  962,  977,  193,  974,
      193,  978,  193,  975,  193,  979,  980,  981,  982,  193,

      193,  193,  193,  193,  983,  984,  964,  985,  193,  986,
      193,  976,  987,  962,  977,  988,  989,  990,  978,  193,
      991,  992,  979,  980,  981,  982,  993,  994,  193,  996,
      193,  983,  984,  995,  985,  193,  986,  193,  999,  987,
     1075,  193,  988,  989,  990, 1075, 1075,  991,  992,  193,
      997,  193,  193,  993,  994,  193,  996,  193,  193,  998,
      995,  193,  193,  193,  193,  999, 1000,  193,  193, 1025,
     1075,  193,  193, 1002, 1001,  193,  193,  997,  193,  193,
     1075, 1075,  193,  193,  193,  193,  998,  193,  193,  193,
      193,  193,  193, 1000,  193,  193, 1025,  193,  193,  193,

     1002, 1001,  193, 1004, 1003,  193,  193,  193,  193,  193,
      193,  193,  193, 1075,  193, 1005,  193,  193,  193,  193,
     1006,  193,  193, 1026,  193,  193,  193,  193,  193,  193,
     1004, 1003,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193, 1005,  193,  193,  193, 1007, 1006,  193,  193,
     1026,  193,  193,  193,  193,  193,  193,  193, 1008,  193,
      193,  193, 1011,  193,  193,  193, 1075,  193,  193, 1027,
      193, 1009,  193, 1007, 1010,  193,  193,  193,  193,  193,
      193,  193,  193, 1028,  193, 1008,  193,  193,  193, 1011,
      193,  193,  193,  193, 1029,  193, 1027,  193, 1009, 1013,

     1012, 1010,  193,  193,  193, 1015,  193,  193,  193,  193,
     1028,  193, 1075,  193,  193,  193,  193, 1017,  193,  193,
      193, 1029,  193,  193,  193,  193, 1013, 1012,  193, 1014,
      193,  193, 1015,  193,  193, 1016,  193,  193,  193,  193,
      193,  193,  193,  193, 1017, 1018,  193,  193,  193,  193,
      193,  193,  193,  193, 1019,  193, 1014,  193,  193, 1075,
      193,  193, 1016,  193,  193,  193,  193,  193,  193,  193,
     1075,  193, 1018, 1020,  193,  193,  193,  193,  193, 1021,
      193, 1019,  193,  193,  193,  193, 1022,  193,  193, 1075,
     1030,  193,  193, 1031,  193,  193,  193,  193,  193, 1032,

     1020, 1075,  193,  193,  193, 1033, 1021,  193,  193,  193,
      193, 1034,  193, 1022,  193,  193,  193, 1030,  193, 1035,
     1031, 1023, 1036, 1024,  193,  193, 1032,  193,  193,  193,
      193,  193, 1033,  193,  193,  193,  193,  193, 1034,  193,
     1037,  193, 1075,  193, 1038,  193, 1035,  193, 1023, 1036,
     1024,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193, 1075,  193,  193, 1039,  193, 1037,  193,  193,
      193, 1038,  193,  193,  193, 1041,  193, 1075,  193,  193,
      193,  193, 1075,  193,  193, 1040,  193,  193,  193,  193,
      193,  193, 1039,  193, 1075,  193,  193,  193, 1075,  193,

      193,  193, 1041,  193,  193, 1044,  193,  193,  193,  193,
      193,  193, 1040,  193,  193,  193,  193,  193,  193, 1042,
      193,  193,  193, 1043,  193,  193,  193, 1075,  193,  193,
      193,  193, 1044,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193, 1048,  193, 1042,  193,  193,  193,
     1043,  193,  193,  193, 1045,  193,  193,  193, 1046,  193,
      193, 1047,  193,  193,  193,  193,  193,  193,  193,  193,
      193, 1048,  193,  193,  193, 1049,  193, 1050, 1051, 1052,
      193, 1045,  193, 1053, 1054, 1046,  193, 1055, 1047,  193,
      193,  193,  193, 1056,  193,  193,  193,  193,  193, 1057,

      193,  193, 1049, 1063, 1050, 1051, 1052,  193, 1075,  193,
     1053, 1054, 1058, 1064, 1055,  193,  193,  193,  193, 1075,
     1056,  193,  193,  193,  193,  193, 1057,  193,  193,  193,
     1063,  193, 1065,  193,  193,  193,  193, 1066, 1059, 1058,
     1064,  193,  193,  193,  193,  193, 1060,  193,  193,  193,
      193, 1061, 1062,  193,  193,  193,  193, 1067,  193, 1065,
      193,  193,  193, 1069, 1066, 1059,  193,  193,  193,  193,
      193,  193,  193, 1060,  193,  193,  193, 1071, 1061, 1062,
      193, 1068,  193,  193, 1067, 1070,  193, 1072,  193,  193,
     1069,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  193, 1071,  193, 1073, 1075, 1068,  193,
      193, 1075, 1070,  193, 1072, 1075,  193,  193,  193,  193,
     1074,  193,  193,  193,  193,  193, 1075,  193,  193,  193,
      193, 1075,  193, 1073, 1075, 1075,  193, 1075, 1075, 1075,
     1075, 1075, 1075, 1075,  193, 1075, 1075, 1074,  193, 1075,
      193, 1075,  193, 1075, 1075, 1075,  193,   46,   46,   46,
       46,   46,   88, 1075, 1075,   88,   88,  179,  179,  179,
     1075,  179,  181, 1075,  181,  181,  181,  184, 1075,  184,
      184,  184,  193, 1075,  193,  193,  193,    7, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075
    } ;

static const flex_int16_t yy_chk[4356] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1078,
       15,   17,   17,   18,   18,   21,   22,   21,   21,   30,
       23,   31,   27,   21,   42,   21,   44,   23,   27,   21,
       21,   55,   42,   55,   23,  388,   22,   23,   23,   49,
       49,  276,   21,   22,   21,   21,   30,   23,   31,   27,
       21,   42,   21,   44,   23,   27,   21,   21,   24,   42,
      188,   23,   24,   22,   23,   23,   24,   25,   28,   25,

       36,   98,   24,   99,   25,   24,   28,   50,   50,   25,
      187,   36,   28,   57,   57,   24,  100,   36,  184,   24,
       58,   58,   92,   24,   25,   28,   25,   36,   98,   24,
       99,   25,   24,   28,   29,   91,   25,   26,   36,   28,
       29,   29,   29,  100,   36,   26,   32,   29,   26,   33,
       32,   26,  103,   33,   26,   88,   32,   26,   85,   33,
       60,   29,   38,   59,   26,   56,   38,   29,   29,   29,
       52,   34,   26,   32,   29,   26,   33,   32,   26,  103,
       33,   26,   35,   32,   26,   34,   33,   86,   86,   38,
       35,   34,   34,   38,   35,   43,   43,   35,   34,  104,

       41,   39,   41,   39,   51,   41,   39,   90,   90,   35,
      182,  182,   34,   39,   39,  186,  186,   35,   34,   34,
       47,   35,   43,   43,   35,   70,  104,   41,   39,   41,
       39,   67,   41,   39,   71,   70,  108,   77,   67,  101,
       39,   39,   40,   40,   67,   70,   40,  101,   45,   40,
       40,   67,   70,  111,   71,   84,   40,   77,   67,   40,
       20,   71,   70,  108,   77,   67,  101,   19,   16,   40,
       40,   67,   70,   40,  101,   84,   40,   40,   67,   11,
      111,   71,   84,   40,   77,    7,   40,   61,   61,    4,
       61,   61,   61,   61,   61,   61,   68,   61,   61,   61,

       68,  105,   84,   61,   68,   61,   61,  114,  114,  102,
       68,   61,  102,   61,  109,  105,  109,   61,   61,  110,
       68,  115,  116,   68,  117,  119,    3,   68,  105,  110,
       61,   68,   61,   61,  114,  114,  102,   68,   61,  102,
       61,  109,  105,  109,   61,   61,  110,   68,  115,  116,
        0,  117,  119,   61,   62,   62,  110,   62,   62,   62,
       62,   62,   62,   72,   62,   62,   62,   72,   73,    0,
        0,   62,   73,   72,  112,    0,  121,   78,   73,  112,
      107,   78,    0,   72,  122,   76,  107,  107,   73,   76,
       72,   62,  123,    0,   72,   73,   76,   78,   62,   73,

       72,  112,   76,  121,   78,   73,  112,  107,   78,   76,
       72,  122,   76,  107,  107,   73,   76,    0,   62,  123,
       62,   63,  124,   76,   78,   63,    0,  125,   63,   76,
        0,  118,  118,   81,  126,   63,   76,   83,   63,   63,
       83,   83,   81,  127,   81,   63,    0,   81,   63,  124,
        0,  128,   63,   81,  125,   63,    0,   83,  118,  118,
       81,  126,   63,    0,   83,   63,   63,   83,   83,   81,
      127,   81,   63,   64,   81,   82,  131,   64,  128,   82,
       81,   64,  129,   82,   83,  129,  130,   64,  133,    0,
       64,  130,  134,  136,  137,    0,  138,   64,    0,   82,

       64,  139,   82,  131,   64,    0,   82,    0,   64,  129,
       82,  113,  129,  130,   64,  133,  113,   64,  130,  134,
      136,  137,  113,  138,   64,   65,   82,  142,  139,  113,
      143,  140,   65,  140,   65,    0,  144,    0,  113,   65,
      141,    0,  141,  113,   65,   65,    0,  145,    0,  113,
        0,  146,   65,  141,  142,  147,  113,  143,  140,   65,
      140,   65,  120,  144,  120,  148,   65,  141,  120,  141,
        0,   65,   65,   66,  145,  120,  149,   66,  146,  120,
      141,   66,  147,  151,   66,  152,    0,   66,  153,  120,
       66,  120,  148,   66,  154,  120,    0,   66,    0,    0,

       66,    0,  120,  149,   66,    0,  120,    0,   66,  157,
      151,   66,  152,  135,   66,  153,  158,   66,    0,  160,
       66,  154,  161,  135,   66,   69,   69,  155,  135,  135,
      156,  155,   69,   69,   69,  156,  157,  162,    0,   69,
      135,  163,  164,  158,  166,   69,  160,    0,    0,  161,
      135,  167,   69,   69,  155,  135,  135,  156,  155,   69,
       69,   69,  156,  168,  162,  159,   69,    0,  163,  164,
        0,  166,   69,   74,  159,  165,  169,   74,  167,  171,
      170,  172,  159,  170,  175,  173,  165,   74,    0,  176,
      168,  173,  159,   74,   74,  177,  278,   74,    0,    0,

       74,  159,  165,  169,   74,  279,  171,  170,  172,  159,
      170,  175,  173,  165,   74,  174,  176,  193,  173,  281,
       74,   74,  177,  278,   74,   75,   75,  282,  174,  194,
      194,  284,  279,    0,   75,    0,  286,  193,   75,    0,
        0,   75,  174,    0,  193,   75,  281,  195,    0,  287,
      194,    0,   75,   75,  282,  174,  194,  194,  284,    0,
      202,   75,  195,  286,  193,   75,  198,  195,   75,  198,
      198,  199,   75,   79,  195,   79,  287,  194,   79,  196,
      202,  196,  288,  289,  199,   79,   79,  202,  291,  195,
      198,  199,  292,  198,  195,   79,  198,  198,  199,  196,

       79,  293,   79,    0,    0,   79,  196,  202,  196,  288,
      289,  199,   79,   79,  197,  291,  294,  198,  199,  292,
        0,  197,   79,   80,   80,  207,  196,   80,  293,  197,
       80,   80,  295,  200,  197,  200,    0,   80,    0,    0,
       80,  197,  207,  294,    0,  207,  297,   80,  197,    0,
       80,   80,  207,    0,   80,  200,  197,   80,   80,  295,
      200,  197,  200,  203,   80,  201,  201,   80,    0,  207,
      203,  204,  207,  297,   80,  204,  203,  203,  299,  205,
      201,  206,  200,  203,    0,  201,  205,    0,  205,  300,
      203,  206,  201,  201,  208,  204,  302,  203,  204,  205,

        0,  206,  204,  203,  203,  299,  205,  201,  206,  208,
      203,  210,  201,  205,  208,  205,  300,  212,  206,    0,
        0,  208,  204,  302,  210,  210,  205,  212,  206,  211,
        0,  210,    0,    0,    0,  303,  208,  212,  210,    0,
      304,  208,  209,  213,  212,  211,  209,  209,  217,  211,
        0,  210,  210,  209,  212,  217,  211,  213,  210,  215,
      209,  215,  303,  213,  212,  305,  209,  304,  217,  209,
      213,  306,  211,  209,  209,  217,  211,  214,  214,  214,
      209,  215,  217,    0,  213,    0,  215,  209,  215,  218,
      213,  219,  305,  209,  220,  217,  218,  307,  306,  214,

        0,  219,    0,    0,  214,  214,  214,  220,  215,  218,
      221,  219,  222,    0,  220,  223,  218,    0,  219,  222,
      221,  220,    0,  218,  307,  223,  214,  216,  219,  216,
      221,  225,  222,  216,  220,  223,  218,  221,  219,  222,
      216,  220,  223,  224,  216,  225,  222,  221,  225,  216,
        0,  225,  223,  224,  216,    0,  216,  221,  225,  222,
      216,  227,  223,  224,  228,  226,    0,  216,    0,  229,
      224,  216,  225,  229,  226,  225,  216,  227,  225,  226,
      224,  227,  230,  308,  228,  226,  310,    0,  227,  229,
      224,  228,  226,  230,    0,  233,  229,  234,    0,  233,

      229,  226,  230,    0,  227,  232,  226,  311,  227,  230,
      308,  228,  226,  310,  232,  233,  229,  234,    0,    0,
      230,  290,  233,  290,  234,  232,  233,  235,  235,  230,
      231,  231,  232,    0,  311,    0,  312,    0,  313,    0,
      231,  232,  233,    0,  234,  231,  231,  235,  290,    0,
      290,  231,  232,    0,  235,  235,  236,  231,  231,  314,
      239,  315,  236,  312,  236,  313,  237,  231,  237,  239,
      237,    0,  231,  231,  235,    0,  236,    0,  231,  237,
      239,  238,    0,  236,  241,  243,  314,  239,  315,  236,
      237,  236,  243,  237,  238,  237,  239,  237,  242,  241,

      240,  238,  246,  236,  241,  243,  237,  239,  238,  240,
      244,  241,  243,  242,  244,  245,  245,  237,  242,  243,
      240,  238,  246,  247,  247,  242,  241,  240,  238,  246,
      316,  241,  243,  248,  244,  245,  240,  244,  317,  249,
      242,  244,  245,  245,  247,  242,    0,  240,  248,  246,
      247,  247,  249,  248,  250,    0,    0,  316,  250,  249,
      248,  244,  245,  251,    0,  317,  249,  251,  252,  318,
        0,  247,  253,  254,  253,  248,  254,  252,  250,  249,
      248,  250,  252,  251,    0,  250,  249,  256,  252,  255,
      251,  255,  253,  254,  251,  252,  318,  256,  255,  253,

      254,  253,    0,  254,  252,  250,  255,  256,  257,  252,
      251,  255,    0,  258,  256,  252,  255,  258,  255,  253,
      254,  257,  260,  259,  256,  255,  259,  320,  257,  260,
      321,    0,    0,  255,  256,  257,    0,  258,  255,  261,
      258,  262,  260,  263,  258,    0,  259,  261,  257,  260,
      259,  263,    0,  259,  320,  257,  260,  321,  261,  261,
      264,  262,    0,  263,  258,    0,  261,  322,  262,  260,
      263,  264,  266,  259,  261,  265,  266,    0,  263,  266,
      264,    0,    0,  267,  267,  261,  261,  264,  262,  268,
      263,  265,  266,  268,  322,  265,    0,  271,  264,  266,

      301,  269,  265,  266,  267,    0,  266,  264,  269,  268,
      267,  267,  270,  323,  269,  301,  268,  271,  265,  266,
      268,  269,  265,  272,  271,  270,    0,  301,  269,  273,
      324,  267,  270,  273,  325,  269,  268,  326,  272,  270,
      323,  269,  301,  272,  271,  327,  328,  329,  269,  330,
      272,  331,  270,  273,  332,  333,  273,  324,  334,  270,
      273,  325,  335,  336,  326,  272,  338,  339,  334,  340,
      272,  341,  327,  328,  329,  342,  330,  343,  331,  344,
      273,  332,  333,  345,  346,  334,  347,  349,  350,  335,
      336,  351,  352,  338,  339,  334,  340,  353,  341,  354,

      355,  356,  342,  357,  343,  358,  344,  359,  360,  361,
      345,  346,  362,  347,  349,  350,  363,  365,  351,  352,
      366,  367,  368,  370,  353,  371,  354,  355,  356,  372,
      357,  373,  358,  375,  359,  360,  361,  377,  376,  362,
      376,  378,  375,  363,  365,  379,  380,  366,  367,  368,
      370,  381,  371,  382,  383,  384,  372,  385,  373,  384,
      375,  386,    0,  389,  377,  376,    0,  376,  378,  375,
        0,  390,  379,  380,  391,  392,  393,  395,  381,  397,
      382,  383,  384,  389,  385,  394,  384,  391,  386,  396,
      389,  390,  394,  396,  391,  392,  393,  395,  390,  397,

        0,  391,  392,  393,  395,  394,  397,  398,  400,    0,
      389,  399,  394,  396,  391,  400,  396,  398,  390,  394,
      396,  391,  392,  393,  395,    0,  397,  398,  400,  399,
        0,  399,  394,  403,  398,  400,  401,  401,  399,  402,
      396,  402,  400,    0,  398,    0,  403,  405,  406,  404,
      408,  499,  406,  403,  398,  400,  399,  401,  399,  500,
      403,  402,  405,  401,  401,  404,  402,  405,  402,  404,
      408,  407,  406,  403,  405,  406,  404,  408,  499,  406,
      403,  409,  410,  411,  401,  407,  500,  415,  402,  405,
      411,  407,  404,    0,  405,  501,  404,  408,  407,  406,

      412,  409,  410,  411,  412,  413,    0,  415,  409,  410,
      411,  414,  407,  414,  415,  418,  417,  411,  407,  417,
      413,  416,  501,    0,  412,  413,  418,  412,  409,  410,
      411,  412,  413,  414,  415,  418,  416,  419,  414,  417,
      414,  416,  418,  417,    0,  420,  417,  413,  416,  421,
      422,  412,  413,  418,  422,  420,    0,  419,  423,    0,
      414,    0,  418,  416,  419,  420,  417,  427,  416,  421,
        0,  424,  420,  424,  422,  425,  421,  422,  423,  426,
      427,  422,  420,  428,  419,  423,  426,  427,  429,  425,
        0,  431,  420,  424,  427,  425,  421,  428,  424,  426,

      424,  422,  425,  428,    0,  423,  426,  427,  429,  443,
      428,  431,    0,  426,  427,  429,  425,  430,  431,  432,
      424,  430,  425,  502,  428,  433,  426,  432,  434,  443,
      428,  434,  433,  435,  503,  429,  443,  436,  431,  432,
      436,  430,  504,  437,  430,  433,  432,  437,  430,  435,
      502,  434,  433,  435,  432,  434,  443,  436,  434,  433,
      435,  503,  438,  437,  436,  444,  432,  436,  430,  504,
      437,  439,  433,  441,  437,  440,  435,  438,  434,  441,
      435,  445,  438,  447,  436,  444,  439,  442,  440,  438,
      437,  439,  444,  441,    0,  440,  448,  442,  439,  447,

      441,  445,  440,  447,  438,  448,  441,  442,  445,  438,
      447,  446,  444,  439,  442,  440,  448,  449,  439,  451,
      441,  446,  440,  448,  442,  450,  447,  505,  445,  452,
      447,  446,  448,  452,  442,    0,    0,  449,  446,  451,
      450,  453,  453,  448,  449,  450,  451,  454,  446,  452,
        0,  454,  450,  455,  505,  455,  452,  456,  446,  456,
      452,  507,  453,  457,  449,  460,  451,  450,  453,  453,
      508,  454,  450,  455,  454,  459,  452,  456,  454,  457,
      455,  458,  455,  457,  456,  460,  456,  461,  507,  453,
      457,  459,  460,  511,  461,  459,  458,  508,  454,  463,

      455,  458,  459,  512,  456,  464,  457,  461,  458,  465,
      457,  462,  460,  463,  461,  513,    0,    0,  459,  463,
      511,  461,  459,  458,  462,  464,  463,  514,  458,  465,
      512,  462,  464,  466,  461,  467,  465,  466,  462,  468,
      463,  469,  513,  470,  467,  472,  463,  470,  472,  469,
      468,  462,  464,  473,  514,  467,  465,  466,  462,  468,
      466,  469,  467,  471,  466,  472,  468,  470,  469,  474,
      470,  467,  472,  473,  470,  472,  469,  468,  471,  474,
      473,  475,  467,  471,  466,    0,  468,  476,  469,  474,
      471,  477,  472,    0,  470,    0,  474,  478,  516,  481,

      473,  475,  485,    0,  517,  471,  474,  476,  475,  477,
      471,  477,  478,  480,  476,  479,  474,  478,  477,  481,
      480,  482,  485,  518,  478,  516,  481,    0,  475,  485,
      479,  517,  482,  480,  476,  479,  477,    0,  477,  478,
      480,  482,  479,  483,  478,  484,  481,  480,  482,  485,
      518,  486,    0,    0,  484,  487,  489,  479,  483,  482,
      480,    0,  479,  483,  487,  484,  489,  488,  482,  519,
      483,  486,  484,    0,    0,  487,  489,  488,  486,  488,
      491,  484,  487,  489,  490,  483,    0,  488,  490,  491,
      483,  487,  484,  489,  488,  521,  519,  492,  486,  493,

      491,  493,  487,  489,  488,  494,  488,  491,  490,  497,
      522,  490,  497,  492,  488,  490,  491,  492,  495,  523,
        0,  493,  521,  494,  492,  494,  493,  491,  493,  497,
      526,  527,  494,  495,  496,  490,  497,  522,  495,  497,
      492,  528,  498,  496,  492,  495,  523,  496,  493,  529,
      494,  530,  494,  531,  496,  498,  497,  526,  527,  532,
      495,  496,  498,  533,  535,  495,  538,  539,  528,  498,
      496,  541,  543,  545,  496,  546,  529,  547,  530,  548,
      531,  496,  498,  549,  550,  552,  532,  556,  558,  498,
      533,  535,  560,  538,  539,  550,  561,  561,  541,  543,

      545,  562,  546,  563,  547,  565,  548,  566,  567,  568,
      549,  550,  552,  569,  556,  558,  571,  572,  573,  560,
      574,  575,  550,  561,  561,  576,  577,  578,  562,  580,
      563,  581,  565,  582,  566,  567,  568,  583,  586,  588,
      569,  589,  590,  571,  572,  573,  591,  574,  575,  592,
      593,  594,  576,  577,  578,  595,  580,  597,  581,  599,
      582,  602,    0,  603,  583,  586,  588,  604,  589,  590,
      706,  605,  606,  591,  602,    0,  592,  593,  594,    0,
      604,  602,  595,  603,  597,  608,  599,  604,  602,  607,
      603,  605,  606,  609,  604,  708,    0,  706,  605,  606,

        0,  602,  607,  612,    0,  608,  613,  604,  602,  607,
      603,  610,  608,  609,  604,  610,  607,  611,  605,  606,
      609,  611,  708,  612,    0,    0,  613,  614,    0,  607,
      612,  610,  608,  613,  710,  614,  607,  617,  610,  615,
      609,  611,  610,  618,  611,  616,    0,  614,  611,  619,
      612,  617,  615,  613,  614,  620,  619,  617,  610,  615,
      616,  710,  614,  618,  617,  616,  615,  711,  611,  619,
      618,  620,  616,  621,  614,  620,  619,  622,  617,  615,
        0,  622,  620,  619,  617,  623,  615,  616,  621,  624,
      618,  624,  616,  621,  711,    0,  619,  627,  620,  625,

      621,  622,  620,  625,  622,  623,  712,  626,  622,  628,
        0,  624,  623,    0,  626,  621,  624,  627,  624,  625,
      621,  629,  629,    0,  627,  713,  625,  626,  622,  628,
      625,    0,  623,  712,  626,  636,  628,  632,  624,  630,
      631,  626,  629,  633,  627,    0,  625,    0,  629,  629,
      630,  631,  713,  632,  626,  636,  628,  632,  633,  630,
      631,  637,  636,  633,  632,    0,  630,  631,  634,  629,
      633,  639,  634,  640,  638,  714,    0,  630,  631,  635,
      632,  637,  636,  635,  632,  633,  630,  631,  637,  638,
      633,  639,  634,  640,  638,  634,    0,    0,  639,  634,

      640,  638,  714,  635,  642,  641,  635,  643,  637,  641,
      635,    0,    0,  644,    0,  642,  638,  645,  639,  634,
      640,  638,  644,  647,  642,  646,  648,  643,  649,  641,
      635,  642,  641,  644,  643,  646,  641,  645,  650,  654,
      644,  649,  642,  647,  645,  646,  648,    0,  649,  644,
      647,  642,  646,  648,  643,  649,  641,  650,  650,  654,
      644,  651,  646,  652,  645,  650,  654,  653,  649,  653,
      647,  655,  646,  648,  651,  649,  652,  656,  655,  657,
      653,  651,  658,  652,  650,  650,  654,  653,  651,    0,
      652,  655,  660,    0,  653,  715,  653,  656,  655,  657,

      659,  651,  658,  652,  656,  655,  657,  653,  651,  658,
      652,  662,  660,  663,  653,  659,  661,  666,  655,  660,
      659,    0,  715,  661,  656,  665,  657,  659,  665,  658,
      666,  662,    0,  663,  664,  716,  661,  666,  662,  660,
      663,  718,  659,  661,  666,  665,  667,  659,  664,  664,
      661,  669,  665,    0,  664,  665,    0,  666,  662,  673,
      663,  664,  716,  661,  666,  668,  667,  668,  718,  670,
      671,  669,  665,  667,    0,  664,  664,    0,  669,  673,
      672,  664,  670,  671,    0,    0,  673,  668,  672,  670,
      671,  719,  668,  667,  668,  674,  670,  671,  669,  674,

      672,  675,    0,  676,  679,  675,  673,  672,    0,  670,
      671,  676,  679,    0,  668,  672,  670,  671,  719,  674,
      677,  678,  674,  676,  679,  675,  674,  672,  675,  682,
      676,  679,  675,  677,  680,  681,  678,  681,  676,  679,
      677,  678,    0,  680,    0,  683,  674,  677,  678,  682,
      676,  679,  675,  685,  680,  684,  682,  681,  687,  684,
      677,  680,  681,  678,  681,  683,  720,  677,  678,  686,
      680,  688,  683,  685,  689,  684,  682,  690,  687,  686,
      685,  680,  684,    0,  681,  687,  684,  722,  689,  686,
      692,  688,  683,  720,  689,    0,  686,  690,  688,  692,

      685,  689,  684,  693,  690,  687,  686,  691,  694,  691,
      692,  697,  694,  695,  722,  689,  686,  692,  688,  693,
        0,  689,  699,  693,  690,  696,  692,  696,  695,  691,
      693,  697,  694,  695,  691,  694,  691,  692,  697,  694,
      695,  698,  699,  723,  698,  696,  693,  700,  724,  699,
      693,  725,  696,  701,  696,  695,  691,  702,  697,  694,
      695,  698,  703,  700,  726,  704,  727,  700,  698,  699,
      723,  698,  696,  701,  700,  724,  728,  702,  725,  729,
      701,  730,  703,  731,  702,  704,  734,  736,  698,  703,
      700,  726,  704,  727,  700,  737,  739,  742,  743,  744,

      701,  745,  750,  728,  702,  752,  729,  753,  730,  703,
      731,  754,  704,  734,  736,  757,  758,  759,  760,  761,
      763,  764,  737,  739,  742,  743,  744,  765,  745,  750,
      766,  767,  752,  768,  753,  769,  770,  771,  754,  773,
      774,  775,  757,  758,  759,  760,  761,  763,  764,  777,
      778,  779,  781,  782,  765,  782,    0,  766,  767,    0,
      768,  783,  769,  770,  771,  784,  773,  774,  775,  785,
      786,  787,  781,  782,  788,    0,  777,  778,  779,  781,
      782,  783,  782,  788,  790,  784,  784,  792,  783,  785,
      786,  787,  784,  790,  788,  791,  785,  786,  787,  781,

      782,  788,  789,  789,  790,  791,  793,  792,  783,    0,
      788,  790,  784,  784,  792,  791,  785,  786,  787,  796,
      790,  788,  791,  789,  797,  794,  793,  857,    0,  789,
      789,  790,  791,  793,  792,  794,  795,  800,  799,  796,
      798,  802,  791,  795,  797,  794,  796,  799,    0,  858,
      789,  797,  794,  793,  857,  798,  795,  800,  799,  860,
      798,  802,  794,  795,  800,  799,  796,  798,  802,  801,
      795,  797,  794,  801,  799,  803,  858,  804,  861,  805,
        0,  862,  798,  795,  800,  799,  860,  798,  802,  801,
      803,  808,  804,  805,  806,  803,  801,  804,  806,  805,

      801,  807,  803,  807,  804,  861,  805,  809,  862,    0,
        0,  808,  811,  812,  806,  812,  801,  803,  808,  804,
      805,  806,  803,  807,  804,  806,  805,  809,  807,  810,
      807,  813,  811,  812,  809,  814,  810,  815,  808,  811,
      812,  806,  812,  863,  813,  816,  817,  819,  864,  810,
      807,  813,  815,    0,  809,  814,  810,  815,  813,  811,
      812,    0,  814,  810,  815,  816,  817,  819,  818,  822,
      863,  813,  816,  817,  819,  864,  810,  820,  813,  815,
      821,  823,  814,  818,  815,  824,  825,  821,  818,  822,
        0,  820,  816,  817,  819,  818,  822,  820,    0,  826,

      821,  823,  827,  866,  820,  824,  825,  821,  823,    0,
      818,  831,  824,  825,  821,  818,  822,  828,  820,  826,
      829,  828,  827,  829,  820,  832,  826,  821,  823,  827,
      866,  831,  824,  825,  833,    0,  830,  836,  831,    0,
      829,  828,  834,    0,  828,  832,  826,  829,  828,  827,
      829,  830,  832,  835,  833,  834,  830,  836,  831,  838,
        0,  833,  834,  830,  836,  867,  835,  829,  828,  834,
      837,  839,  832,  835,  837,  839,  841,    0,  830,  838,
      835,  833,  834,  830,  836,    0,  838,  840,  840,  834,
      837,  841,  867,  835,    0,  839,  841,  837,  839,  845,

      835,  837,  839,  841,  842,  842,  838,  844,  840,  843,
        0,    0,  845,  843,  840,  840,    0,  837,  841,  845,
        0,  844,  839,  841,    0,  842,  845,  844,    0,  846,
      848,  842,  842,  843,  844,  840,  843,  847,  849,  845,
      843,  847,  850,  850,  846,    0,  845,  851,  844,  846,
      848,  854,  842,  852,  844,  854,  846,  848,  849,    0,
      843,  847,  870,  850,  847,  849,  872,  851,  847,  850,
      850,  846,  853,  852,  851,  854,  846,  848,  854,  855,
      852,  856,  854,  855,  875,  849,  853,  877,  847,  870,
      850,  878,  853,  872,  851,  881,  884,  885,  888,  853,

      852,  856,  854,  855,  889,  891,  855,  892,  856,  893,
      855,  875,  895,  853,  877,  896,  900,  902,  878,  853,
      903,  904,  881,  884,  885,  888,  909,  910,  856,  912,
      855,  889,  891,  911,  892,  913,  893,  911,  916,  895,
        0,  914,  896,  900,  902,    0,    0,  903,  904,  912,
      914,  919,  917,  909,  910,  913,  912,  911,  916,  915,
      911,  914,  913,  915,  911,  916,  917,  918,  914,  965,
        0,  919,  917,  920,  918,  920,  912,  914,  919,  917,
        0,    0,  913,  915,  911,  916,  915,  918,  914,  921,
      915,  922,  923,  917,  918,  920,  965,  925,  919,  917,

      920,  918,  920,  924,  921,  924,  926,  927,  928,  921,
      915,  922,  923,    0,  918,  926,  921,  925,  922,  923,
      929,  930,  920,  968,  925,  924,  926,  927,  928,  933,
      924,  921,  924,  926,  927,  928,  921,  931,  922,  923,
      929,  930,  926,  932,  925,  934,  931,  929,  930,  933,
      968,  935,  924,  926,  927,  928,  933,  931,  932,  936,
      937,  938,  939,  932,  931,  934,    0,  929,  930,  972,
      932,  935,  934,  931,  938,  940,  933,  941,  935,  936,
      937,  938,  939,  974,  931,  932,  936,  937,  938,  939,
      932,  944,  934,  942,  975,  940,  972,  941,  935,  943,

      942,  938,  940,  943,  941,  946,  936,  937,  938,  939,
      974,  944,    0,  942,  945,  947,  948,  949,  944,  949,
      942,  975,  940,  943,  941,  946,  943,  942,  951,  945,
      943,  950,  946,  952,  945,  947,  948,  953,  944,  949,
      942,  945,  947,  948,  949,  950,  949,  954,  951,  955,
      943,  950,  946,  952,  954,  951,  945,  953,  950,    0,
      952,  945,  947,  948,  953,  959,  949,  954,  960,  955,
        0,  958,  950,  956,  954,  951,  955,  956,  950,  957,
      952,  954,  961,  957,  953,  959,  958,  962,  960,    0,
      981,  958,  959,  983,  954,  960,  955,  956,  958,  984,

      956,    0,  961,  957,  956,  987,  957,  962,  963,  961,
      957,  990,  959,  958,  962,  960,  964,  981,  958,  991,
      983,  963,  992,  964,  956,  995,  984,  996,  963,  961,
      957,  997,  987,  999,  962,  963,  964,  998,  990, 1000,
      995, 1001,    0,  964,  998,  995,  991,  996,  963,  992,
      964,  997,  995,  999,  996,  963, 1003,  998,  997, 1000,
      999, 1001,    0,  964,  998, 1002, 1000,  995, 1001, 1002,
     1004,  998,  995, 1005,  996, 1005, 1003,    0,  997, 1006,
      999, 1007,    0, 1003,  998, 1004, 1000, 1008, 1001, 1002,
     1004, 1009, 1002, 1005,    0, 1010, 1002, 1004,    0, 1006,

     1005, 1007, 1005, 1003, 1012, 1014, 1006, 1008, 1007, 1015,
     1013, 1009, 1004, 1016, 1008, 1010, 1002, 1004, 1009, 1011,
     1005, 1011, 1010, 1013, 1012, 1014, 1006,    0, 1007, 1015,
     1013, 1012, 1014, 1016, 1008, 1018, 1015, 1013, 1009, 1017,
     1016, 1011, 1010, 1019, 1022, 1020, 1011, 1023, 1011, 1024,
     1013, 1012, 1014, 1021, 1017, 1018, 1015, 1013, 1020, 1017,
     1016, 1021, 1018, 1019, 1022, 1020, 1017, 1023, 1011, 1024,
     1019, 1022, 1020, 1021, 1023, 1025, 1024, 1026, 1027, 1030,
     1021, 1017, 1018, 1032, 1034, 1020, 1017, 1035, 1021, 1037,
     1019, 1022, 1020, 1037, 1023, 1038, 1024, 1039, 1040, 1038,

     1021, 1041, 1025, 1049, 1026, 1027, 1030, 1043,    0, 1037,
     1032, 1034, 1039, 1050, 1035, 1038, 1037, 1039, 1040,    0,
     1037, 1041, 1038, 1042, 1039, 1040, 1038, 1043, 1041, 1045,
     1049, 1046, 1051, 1044, 1043, 1048, 1037, 1053, 1042, 1039,
     1050, 1047, 1038, 1042, 1039, 1040, 1044, 1056, 1041, 1045,
     1042, 1046, 1047, 1044, 1043, 1048, 1045, 1056, 1046, 1051,
     1044, 1047, 1048, 1058, 1053, 1042, 1057, 1056, 1047, 1059,
     1042, 1060, 1061, 1044, 1056, 1062, 1045, 1063, 1046, 1047,
     1044, 1057, 1048, 1058, 1056, 1060, 1057, 1064, 1047, 1059,
     1058, 1060, 1061, 1057, 1056, 1062, 1059, 1067, 1060, 1061,

     1068, 1069, 1062, 1070, 1063, 1073, 1067,    0, 1057, 1074,
     1058,    0, 1060, 1057, 1064,    0, 1059, 1067, 1060, 1061,
     1068, 1069, 1062, 1070, 1067, 1073,    0, 1068, 1069, 1074,
     1070,    0, 1073, 1067,    0,    0, 1074,    0,    0,    0,
        0,    0,    0,    0, 1067,    0,    0, 1068, 1069,    0,
     1070,    0, 1073,    0,    0,    0, 1074, 1076, 1076, 1076,
     1076, 1076, 1077,    0,    0, 1077, 1077, 1079, 1079, 1079,
        0, 1079, 1080,    0, 1080, 1080, 1080, 1081,    0, 1081,
     1081, 1081, 1082,    0, 1082, 1082, 1082, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 1989 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2003 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2290 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1076 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1075 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
/* */
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(AGGREGATION)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(CARDINALITY)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(ENCODING)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
/* */
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 138:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 145:
#line 210 "flex_lexer.l"
case 146:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 235 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3138 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1076 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1076 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1075);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 240 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

